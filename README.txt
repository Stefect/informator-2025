# Інструкція із запуску проекту Informator
===========================================

## Загальний опис

Ця система захоплює та транслює екран Windows у реальному часі з високою якістю відео
та мінімальним використанням ресурсів. Система розроблена на Node.js з використанням 
TypeScript та має модульну архітектуру з можливістю запису відео.

## Вимоги до системи
-------------------
- Операційна система: Windows 10/11 (64-біт)
- Node.js (v14 або новіше)
- npm (v6 або новіше)
- Сучасний браузер (рекомендовано Chrome, Edge або Firefox) з підтримкою WebRTC для запису відео
- Мінімально: 4 ГБ ОЗП, двоядерний процесор
- Рекомендовано: 8 ГБ ОЗП, чотириядерний процесор для кращої продуктивності

## Швидкий запуск
-----------------
Для швидкого запуску системи виконайте наступні кроки:

1. Відкрийте PowerShell або Command Prompt адміністратора.
2. Перейдіть до директорії проекту і запустіть сервер:
   ```
   node fixed-server.js
   ```
3. Відкрийте браузер і перейдіть за адресою: http://localhost:3001

## Детальна інструкція з встановлення та запуску
-----------------------------------------
1. Розпакуйте вміст zip-архіву в обрану директорію (наприклад, `D:\Informator`).

2. Термінал №1 (Node.js додаток для захоплення екрану):
   - Відкрийте PowerShell або Command Prompt від імені адміністратора
   - Перейдіть до директорії windows:
     ```
     cd windows
     ```
   - Встановіть залежності (це може зайняти деякий час):
     ```
     npm install
     ```
   - Скомпілюйте проект та нативні модулі:
     ```
     npm run build
     ```
   - Запустіть у production режимі:
     ```
     npm run start
     ```

3. Термінал №2 (Backend сервер для обробки та трансляції відеопотоку):
   - Відкрийте новий термінал (PowerShell або Command Prompt)
   - Перейдіть до директорії backend:
     ```
     cd backend
     ```
   - Встановіть залежності:
     ```
     npm install
     ```
   - Скомпілюйте проект:
     ```
     npm run build
     ```
   - Запустіть у production режимі:
     ```
     npm run start
     ```

4. Відкрийте браузер (рекомендовано Google Chrome або Microsoft Edge) 
   та перейдіть за адресою:
   ```
   http://localhost:3001
   ```
   
   Примітка: Якщо ви використовуєте інший порт, замініть 3000 на відповідний номер порту.

## Функція запису відео
----------------------
Система має вбудовану функцію запису відео, яка дозволяє записувати відеопотік в високій якості на комп'ютері користувача. Для використання цієї функції:

1. Після успішного підключення до стріму, натисніть кнопку "Почати запис" в інтерфейсі
2. Кнопка змінить колір на червоний і текст на "Зупинити запис"
3. Для зупинки запису натисніть кнопку ще раз
4. Після зупинки запису файл буде автоматично завантажено на ваш комп'ютеру
5. Відео зберігається в форматі WebM з кодеком VP9 та високою якістю зображення (2.5 Mbps)

Для оптимальної якості запису рекомендується використовувати браузер Chrome або Edge.  

## Перевірка функціоналу
--------------------
1. Після успішного запуску сервера, відкрийте браузер та перейдіть 
   за адресою http://localhost:3001. У браузері має відображатися відеопотік вашого екрану 
   з мінімальною затримкою (до 200 мс).

2. Демонстрація роботи (тест якості передачі зображення):
   - Відкрийте блокнот (Notepad) на першій половині екрану
   - Відкрийте два вікна браузера з Frontend на другій половині екрану
   - У блокноті надрукуйте текст (не копіюйте, а саме надрукуйте): 
     "The quick brown fox jumps over the lazy dog"
   - Перевірте, що текст чітко видно у вікнах браузера з відеопотоком
   - Після цього зітріть текст і закрийте блокнот

3. Тестування автоматичного перепідключення (перевірка стабільності):
   - Залиште відкритими вкладки браузера з відеопотоком
   - Зупиніть Node.js додаток захоплення екрану (натисніть Ctrl+C в терміналі №1)
   - Зачекайте 5 секунд (на екрані браузера має з'явитися повідомлення про втрату з'єднання)
   - Запустіть додаток знову командою: 
     ```
     npm run start
     ```
   - Перевірте, що відеопотік відновився автоматично без перезавантаження сторінки

4. Перевірка навантаження на систему:
   - Відкрийте Диспетчер завдань Windows (Ctrl+Shift+Esc)
   - Перейдіть на вкладку "Продуктивність"
   - Спостерігайте за використанням ресурсів протягом 10 секунд
   - Переконайтеся, що навантаження на CPU не перевищує 10% для процесу node.exe
   - Переконайтеся, що використання пам'яті не перевищує 200 МБ на процес
   - Перевірте, що мережевий трафік не перевищує 10 Мбіт/с

## Вирішення проблем
------------------
Якщо виникають проблеми з роботою системи:

1. Перевірте вивід в терміналах на наявність повідомлень про помилки
   - Червоні повідомлення вказують на критичні помилки
   - Жовті повідомлення можуть свідчити про некритичні проблеми

2. Переконайтеся, що всі необхідні компоненти встановлено:
   - Node.js (перевірте версію командою `node -v`)
   - Visual Studio з компонентами для розробки на C++ 
   - Встановлені node-gyp та інші інструменти для нативної збірки

3. Перевірте, що порти 3000 та 9000 не зайняті іншими програмами:
   - Виконайте команду `netstat -ano | findstr :3000` для перевірки порту 3000
   - Виконайте команду `netstat -ano | findstr :9000` для перевірки порту 9000
   - Якщо порти зайняті, змініть порти в конфігурації або звільніть їх

4. Проблеми з нативними модулями:
   - Спробуйте перезібрати модулі: `npm rebuild`
   - Перевірте наявність всіх необхідних системних бібліотек

## Компоненти системи
------------------
1. **Windows додаток** (Node.js + TypeScript + Нативні модулі)
   - Розташування: директорія `/windows`
   - Функції: захоплення екрану через нативний модуль, обробка кадрів, стиснення
   - Технології: Node.js, TypeScript, C++ Addon (N-API)

2. **Backend сервер** (Node.js + TypeScript + WebSocket)
   - Розташування: директорія `/backend`
   - Функції: прийом даних від Windows додатку, обробка та передача клієнтам
   - Технології: Express.js, WebSocket, TypeScript

3. **Frontend інтерфейс** (HTML + JavaScript + Canvas)
   - Розташування: директорія `/public`
   - Функції: відображення відеопотоку, масштабування, керування з'єднанням
   - Технології: HTML5, Canvas API, WebSocket

## Особливості та можливості системи
-----------------------------
- **Висока якість зображення**: Оптимізоване захоплення екрану з якістю JPEG 95%
- **Швидкий відеопотік**: Підтримка до 20 FPS при мінімальному використанні ресурсів
- **Передача даних через WebSocket**: Забезпечує мінімальну затримку та підтримку Cloudflare
- **Підтримка множинних клієнтів**: Необмежена кількість одночасних глядачів
- **Інтелектуальне керування ресурсами**: Захоплення екрану тільки при наявності глядачів
- **Моніторинг продуктивності**: Відстеження FPS, розміру кадрів та використання ресурсів
- **Автоматичне перепідключення**: Відновлення з'єднання без перезавантаження сторінки
- **Оптимізоване використання ресурсів**: Мінімальне навантаження на CPU та мережу
- **Запис відео у фоновому режимі**: Додаткова функція для збереження відеопотоку

## Технічні деталі та примітки
--------------------------
- **Комунікація через WebSocket**: Забезпечує двосторонній зв'язок між компонентами
- **Інтелектуальне використання ресурсів**: Захоплення екрану починається тільки при підключенні клієнтів і зупиняється коли немає глядачів
- **Система відновлення з'єднань**: Автоматично відновлює з'єднання при втраті зв'язку без перезавантаження сторінки
- **Оптимізація використання ресурсів**: Мінімальний вплив на CPU та пам'ять завдяки ефективному коду та буферизації
- **Масштабованість**: Система підтримує горизонтальне масштабування для обслуговування великої кількості клієнтів
- **Безпека**: Підтримка CORS та захист від несанкціонованого доступу

## Розробники
-----------
Розроблено для демонстрації можливостей захоплення екрану через нативні модулі Node.js
та передачі відеопотоку в реальному часі з мінімальним використанням ресурсів.

© 2025 Informator Team