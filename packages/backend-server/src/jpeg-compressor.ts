/**
 * JPEG Frame Compressor –¥–ª—è Backend
 * –°—Ç–∏—Å–∫–∞—î BGRA RAW -> JPEG –¥–ª—è –∑–º–µ–Ω—à–µ–Ω–Ω—è —Ç—Ä–∞—Ñ—ñ–∫—É
 * –ü—Ä–æ—Å—Ç—ñ—à–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞ H.264 (–Ω–µ –ø–æ—Ç—Ä–µ–±—É—î FFmpeg)
 */

import sharp from 'sharp';
import { logger } from './logger';

export interface CompressorConfig {
    quality: number; // 1-100
    chroma: '4:4:4' | '4:2:0';
}

export class JPEGCompressor {
    private config: CompressorConfig;
    private frameCount = 0;

    constructor(config: CompressorConfig = { quality: 80, chroma: '4:2:0' }) {
        this.config = config;
        logger.info(`üóúÔ∏è JPEG Compressor —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ (quality: ${config.quality})`);
    }

    async compress(bgraBuffer: Buffer, width: number, height: number): Promise<Buffer> {
        try {
            this.frameCount++;

            // BGRA —Ñ–æ—Ä–º–∞—Ç –ø–æ—Ç—Ä–µ–±—É—î –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó:
            // 1. –ü–æ–º—ñ–Ω—è—Ç–∏ R ‚Üî B (BGRA ‚Üí RGBA)
            // 2. –í–∏–¥–∞–ª–∏—Ç–∏ Alpha (RGBA ‚Üí RGB)
            this.swapRedBlue(bgraBuffer);

            // –¢–µ–ø–µ—Ä —É –Ω–∞—Å RGBA, Sharp –º–æ–∂–µ –∫–æ–Ω–≤–µ—Ä—Ç—É–≤–∞—Ç–∏ –≤ JPEG
            const jpegBuffer = await sharp(bgraBuffer, {
                raw: {
                    width,
                    height,
                    channels: 4 // RGBA = 4 channels
                }
            })
            .removeAlpha() // RGBA -> RGB
            .jpeg({
                quality: this.config.quality,
                chromaSubsampling: this.config.chroma,
                force: true,
                progressive: false, // –ë–∞–∑–æ–≤–∏–π JPEG –¥–ª—è —à–≤–∏–¥–∫–æ—Å—Ç—ñ
                optimiseCoding: false // –®–≤–∏–¥—à–µ –∫–æ–¥—É–≤–∞–Ω–Ω—è
            })
            .toBuffer();

            const compressionRatio = ((1 - jpegBuffer.length / bgraBuffer.length) * 100).toFixed(1);
            
            if (this.frameCount % 50 === 0) {
                logger.info(
                    `üóúÔ∏è –ö–∞–¥—Ä #${this.frameCount}: ${(bgraBuffer.length / 1024).toFixed(0)} KB ‚Üí ` +
                    `${(jpegBuffer.length / 1024).toFixed(0)} KB (${compressionRatio}% —Å—Ç–∏—Å–Ω–µ–Ω–Ω—è)`
                );
            }

            return jpegBuffer;
        } catch (error) {
            logger.error('‚ùå –ü–æ–º–∏–ª–∫–∞ JPEG —Å—Ç–∏—Å–Ω–µ–Ω–Ω—è:', error);
            throw error;
        }
    }

    /**
     * –ü–æ–º—ñ–Ω—è—Ç–∏ —á–µ—Ä–≤–æ–Ω–∏–π —Ç–∞ —Å–∏–Ω—ñ–π –∫–∞–Ω–∞–ª–∏ (BGRA ‚Üí RGBA)
     * –í–∏–∫–æ–Ω—É—î—Ç—å—Å—è in-place –¥–ª—è —à–≤–∏–¥–∫–æ—Å—Ç—ñ
     */
    private swapRedBlue(buffer: Buffer): void {
        for (let i = 0; i < buffer.length; i += 4) {
            const temp = buffer[i];     // B
            buffer[i] = buffer[i + 2];  // B ‚Üê R
            buffer[i + 2] = temp;       // R ‚Üê B
            // G —Ç–∞ A –∑–∞–ª–∏—à–∞—é—Ç—å—Å—è –±–µ–∑ –∑–º—ñ–Ω
        }
    }

    getFrameCount(): number {
        return this.frameCount;
    }

    // –†–æ–∑—Ä–∞—Ö—É–≤–∞—Ç–∏ –æ—á—ñ–∫—É–≤–∞–Ω–∏–π —Ç—Ä–∞—Ñ—ñ–∫
    static calculateBitrate(width: number, height: number, fps: number, quality: number): number {
        // –û—Ä—ñ—î–Ω—Ç–æ–≤–Ω–∏–π —Ä–æ–∑–º—ñ—Ä JPEG –∫–∞–¥—Ä—É (–∑–∞–ª–µ–∂–∏—Ç—å –≤—ñ–¥ —è–∫–æ—Å—Ç—ñ —Ç–∞ —Å–∫–ª–∞–¥–Ω–æ—Å—Ç—ñ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è)
        // Quality 80, 1280x720 ‚âà 50-100 KB –Ω–∞ –∫–∞–¥—Ä
        const avgFrameSizeKB = (width * height / 10000) * (quality / 100);
        const bitrateKbps = avgFrameSizeKB * fps * 8; // KB/s * 8 = Kbps
        return bitrateKbps;
    }
}
