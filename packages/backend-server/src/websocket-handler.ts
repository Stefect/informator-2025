/**
 * –û–±—Ä–æ–±–Ω–∏–∫ WebSocket –ø—ñ–¥–∫–ª—é—á–µ–Ω—å
 * –ö–µ—Ä—É—î –∫–æ–º—É–Ω—ñ–∫–∞—Ü—ñ—î—é –º—ñ–∂ Capture Clients —Ç–∞ Viewers
 */

import WebSocket, { WebSocketServer } from 'ws';
import { ClientManager, ClientType } from './client-manager';
import { StreamManager, FrameMetadata } from './stream-manager';
import { JPEGCompressor } from './jpeg-compressor';
import { logger } from './logger';
import { MESSAGE_TYPES, CLIENT_TYPES, ERRORS, JPEG_CONFIG, FRAME_CODECS } from './constants';
import { isValidMessage, safeJSONParse, generateId, formatCompressionRatio } from './utils';
import type { BaseMessage, ClientMessage } from './types';

export class WebSocketHandler {
    private wss: WebSocketServer;
    private streamManager: StreamManager;
    private clientManager: ClientManager;
    private compressor: JPEGCompressor;

    // –¢–∏–º—á–∞—Å–æ–≤–µ —Å—Ö–æ–≤–∏—â–µ –¥–ª—è –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –±—ñ–Ω–∞—Ä–Ω–∏—Ö –¥–∞–Ω–∏—Ö –ø—ñ—Å–ª—è –º–µ—Ç–∞–¥–∞–Ω–∏—Ö
    private pendingFrames = new Map<string, FrameMetadata>();

    constructor(
        wss: WebSocketServer,
        streamManager: StreamManager,
        clientManager: ClientManager
    ) {
        this.wss = wss;
        this.streamManager = streamManager;
        this.clientManager = clientManager;
        this.compressor = new JPEGCompressor({ 
            quality: JPEG_CONFIG.QUALITY, 
            chroma: JPEG_CONFIG.CHROMA_SUBSAMPLING 
        });

        this.setupWebSocket();
        this.setupStreamEvents();
    }

    private setupWebSocket(): void {
        this.wss.on('connection', (ws: WebSocket) => {
            const clientId = this.clientManager.addClient(ws);

            ws.on('message', (data: WebSocket.Data) => {
                this.handleMessage(clientId, data);
            });

            ws.on('close', () => {
                this.handleDisconnect(clientId);
            });

            ws.on('error', (error) => {
                logger.error(`‚ùå WebSocket –ø–æ–º–∏–ª–∫–∞ –¥–ª—è ${clientId}:`, error);
            });

            // –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –≤—ñ—Ç–∞–ª—å–Ω–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            this.sendMessage(ws, {
                type: MESSAGE_TYPES.WELCOME,
                clientId,
                timestamp: Date.now()
            });
        });

        logger.info('üîå WebSocket server –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ');
    }

    private setupStreamEvents(): void {
        // –ö–æ–ª–∏ –Ω–µ–º–∞—î –≥–ª—è–¥–∞—á—ñ–≤, –ø–æ–≤—ñ–¥–æ–º–∏—Ç–∏ Capture Client –∑—É–ø–∏–Ω–∏—Ç–∏ –∑–∞—Ö–æ–ø–ª–µ–Ω–Ω—è
        this.streamManager.on('no_viewers', (streamId: string) => {
            const stream = this.streamManager.getStream(streamId);
            if (stream) {
                const captureClient = this.clientManager.getClient(stream.captureClientId);
                if (captureClient) {
                    this.sendCommand(captureClient.ws, {
                        type: MESSAGE_TYPES.STOP_CAPTURE
                    });
                }
            }
        });

        // –ö–æ–ª–∏ –¥–æ–¥–∞—î—Ç—å—Å—è –ø–µ—Ä—à–∏–π –≥–ª—è–¥–∞—á, –∑–∞–ø—É—Å—Ç–∏—Ç–∏ –∑–∞—Ö–æ–ø–ª–µ–Ω–Ω—è
        this.streamManager.on('viewer_added', ({ streamId, viewerId }) => {
            const stream = this.streamManager.getStream(streamId);
            if (stream && stream.viewerIds.size === 1) {
                // –ü–µ—Ä—à–∏–π –≥–ª—è–¥–∞—á - –∑–∞–ø—É—Å—Ç–∏—Ç–∏ –∑–∞—Ö–æ–ø–ª–µ–Ω–Ω—è
                const captureClient = this.clientManager.getClient(stream.captureClientId);
                if (captureClient) {
                    this.sendCommand(captureClient.ws, {
                        type: MESSAGE_TYPES.START_CAPTURE
                    });
                }
            }
        });
    }

    private async handleMessage(clientId: string, data: WebSocket.Data): Promise<void> {
        const client = this.clientManager.getClient(clientId);
        if (!client) return;

        this.clientManager.updateActivity(clientId);

        // –î–µ—Ç–∞–ª—å–Ω–µ –ª–æ–≥—É–≤–∞–Ω–Ω—è –¥–ª—è –¥–µ–±–∞–≥—É
        logger.info(`üì® –û—Ç—Ä–∏–º–∞–Ω–æ –¥–∞–Ω—ñ –≤—ñ–¥ ${clientId}, —Ç–∏–ø: ${typeof data}, isBuffer: ${Buffer.isBuffer(data)}`);

        // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ —Ü–µ —Ç–µ–∫—Å—Ç–æ–≤–µ –∞–±–æ –±—ñ–Ω–∞—Ä–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        if (Buffer.isBuffer(data) || data instanceof ArrayBuffer) {
            // –°–ø—Ä–æ–±—É–≤–∞—Ç–∏ —Ä–æ–∑–ø–∞—Ä—Å–∏—Ç–∏ —è–∫ JSON (–º–æ–∂–ª–∏–≤–æ —Ü–µ —Ç–µ–∫—Å—Ç –≤ Buffer)
            try {
                const text = data.toString();
                const message = JSON.parse(text);
                logger.info(`üì• –†–æ–∑–ø–∞—Ä—Å–µ–Ω–æ JSON –∑ Buffer: ${message.type}`);
                this.handleTextMessage(clientId, message);
                return;
            } catch {
                // –¶–µ —Å–ø—Ä–∞–≤–¥—ñ –±—ñ–Ω–∞—Ä–Ω—ñ –¥–∞–Ω—ñ - –∫–∞–¥—Ä –≤—ñ–¥–µ–æ
                await this.handleBinaryFrame(clientId, data as Buffer);
            }
        } else {
            // –¢–µ–∫—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è - JSON
            try {
                const message = JSON.parse(data.toString());
                this.handleTextMessage(clientId, message);
            } catch (error) {
                logger.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É JSON –≤—ñ–¥ ${clientId}:`, error);
            }
        }
    }

    private handleTextMessage(clientId: string, message: any): void {
        // –í–∞–ª—ñ–¥–∞—Ü—ñ—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        if (!isValidMessage(message)) {
            logger.warn(`‚ö†Ô∏è –ù–µ–≤–∞–ª—ñ–¥–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ ${clientId}:`, message);
            return;
        }

        logger.info(`üì• –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ ${clientId}: ${message.type}`);

        switch (message.type) {
            case MESSAGE_TYPES.IDENTIFICATION:
                this.handleIdentification(clientId, message);
                break;

            case MESSAGE_TYPES.FRAME_METADATA:
                this.handleFrameMetadata(clientId, message);
                break;

            case MESSAGE_TYPES.JOIN_STREAM:
                this.handleJoinStream(clientId, message);
                break;

            case MESSAGE_TYPES.HEARTBEAT:
                this.handleHeartbeat(clientId, message);
                break;

            case MESSAGE_TYPES.METRICS:
                this.handleMetrics(clientId, message);
                break;

            default:
                logger.warn(`‚ö†Ô∏è –ù–µ–≤—ñ–¥–æ–º–∏–π —Ç–∏–ø –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ ${clientId}:`, message.type);
        }
    }

    private handleIdentification(clientId: string, message: any): void {
        const clientType: ClientType = message.clientType || CLIENT_TYPES.UNKNOWN;
        this.clientManager.setClientType(clientId, clientType);
        this.clientManager.setClientMetadata(clientId, message);

        logger.info(`üÜî –ö–ª—ñ—î–Ω—Ç ${clientId} —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–æ–≤–∞–Ω–æ —è–∫: ${clientType}`);

        if (clientType === CLIENT_TYPES.CAPTURE) {
            // –°—Ç–≤–æ—Ä–∏—Ç–∏ –ø–æ—Ç—ñ–∫ –¥–ª—è —Ü—å–æ–≥–æ Capture Client
            const streamId = this.streamManager.createStream(clientId);
            
            // –í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ streamId –Ω–∞–∑–∞–¥ –∫–ª—ñ—î–Ω—Ç—É
            const client = this.clientManager.getClient(clientId);
            if (client) {
                this.sendMessage(client.ws, {
                    type: MESSAGE_TYPES.STREAM_CREATED,
                    streamId,
                    timestamp: Date.now()
                });
            }
        }
    }

    private handleFrameMetadata(clientId: string, message: any): void {
        const metadata: FrameMetadata = {
            width: message.width,
            height: message.height,
            timestamp: message.timestamp,
            frameNumber: message.frameNumber,
            size: message.size
        };

        // –ó–±–µ—Ä–µ–≥—Ç–∏ –º–µ—Ç–∞–¥–∞–Ω—ñ, –æ—á—ñ–∫—É—î–º–æ –±—ñ–Ω–∞—Ä–Ω–∏–π –∫–∞–¥—Ä –Ω–∞—Å—Ç—É–ø–Ω–∏–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º
        this.pendingFrames.set(clientId, metadata);

        // –û–Ω–æ–≤–∏—Ç–∏ –º–µ—Ç–∞–¥–∞–Ω—ñ –ø–æ—Ç–æ–∫—É
        const stream = this.streamManager.getStreamByCaptureClient(clientId);
        if (stream) {
            this.streamManager.updateStreamMetadata(stream.streamId, metadata);
        }
    }

    private async handleBinaryFrame(clientId: string, frameData: Buffer): Promise<void> {
        const metadata = this.pendingFrames.get(clientId);
        if (!metadata) {
            logger.warn(`‚ö†Ô∏è –û—Ç—Ä–∏–º–∞–Ω–æ –∫–∞–¥—Ä –±–µ–∑ –º–µ—Ç–∞–¥–∞–Ω–∏—Ö –≤—ñ–¥ ${clientId}`);
            return;
        }

        this.pendingFrames.delete(clientId);

        // –ó–Ω–∞–π—Ç–∏ –ø–æ—Ç—ñ–∫ –¥–ª—è —Ü—å–æ–≥–æ Capture Client
        const stream = this.streamManager.getStreamByCaptureClient(clientId);
        if (!stream) {
            logger.warn(`‚ö†Ô∏è –ü–æ—Ç—ñ–∫ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –¥–ª—è ${clientId}`);
            return;
        }

        // –ó–∞–ø–∏—Å–∞—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É (–æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–π —Ä–æ–∑–º—ñ—Ä)
        this.streamManager.recordFrameReceived(stream.streamId, frameData.length);

        // –°—Ç–∏—Å–Ω—É—Ç–∏ BGRA -> JPEG –ø–µ—Ä–µ–¥ –≤—ñ–¥–ø—Ä–∞–≤–∫–æ—é
        let compressedFrame: Buffer;
        let codec: typeof FRAME_CODECS.BGRA | typeof FRAME_CODECS.JPEG = FRAME_CODECS.BGRA;
        
        try {
            compressedFrame = await this.compressor.compress(
                frameData,
                metadata.width,
                metadata.height
            );
            codec = FRAME_CODECS.JPEG;
        } catch (error) {
            logger.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–∏—Å–Ω–µ–Ω–Ω—è, –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª:', error);
            compressedFrame = frameData; // Fallback –¥–æ RAW
        }

        // –†–æ–∑—ñ—Å–ª–∞—Ç–∏ –∫–∞–¥—Ä —É—Å—ñ–º –≥–ª—è–¥–∞—á–∞–º
        const viewers = this.streamManager.getViewersForStream(stream.streamId);
        
        let sentCount = 0;
        for (const viewerId of viewers) {
            const viewer = this.clientManager.getClient(viewerId);
            if (viewer && viewer.ws.readyState === WebSocket.OPEN) {
                // –í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –º–µ—Ç–∞–¥–∞–Ω—ñ (–∑ –æ–Ω–æ–≤–ª–µ–Ω–∏–º codec —Ç–∞ size)
                this.sendMessage(viewer.ws, {
                    type: MESSAGE_TYPES.FRAME_METADATA,
                    ...metadata,
                    size: compressedFrame.length,
                    codec: codec
                });

                // –í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –±—ñ–Ω–∞—Ä–Ω—ñ –¥–∞–Ω—ñ (—Å—Ç–∏—Å–Ω—É—Ç—ñ)
                viewer.ws.send(compressedFrame, (error) => {
                    if (error) {
                        logger.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –∫–∞–¥—Ä—É –≥–ª—è–¥–∞—á—É ${viewerId}:`, error);
                    }
                });

                sentCount++;
            }
        }

        // –ó–∞–ø–∏—Å–∞—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ (—Å—Ç–∏—Å–Ω—É—Ç–∏–π —Ä–æ–∑–º—ñ—Ä)
        this.streamManager.recordFrameSent(stream.streamId, compressedFrame.length, sentCount);

        logger.debug(`üì§ –ö–∞–¥—Ä #${metadata.frameNumber} —Ä–æ–∑—ñ—Å–ª–∞–Ω–æ ${sentCount} –≥–ª—è–¥–∞—á–∞–º (${codec})`);
    }

    private handleJoinStream(clientId: string, message: any): void {
        const streamId = message.streamId;
        
        if (!streamId) {
            logger.warn(`‚ö†Ô∏è –ö–ª—ñ—î–Ω—Ç ${clientId} –Ω–∞–º–∞–≥–∞—î—Ç—å—Å—è –ø—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—è –±–µ–∑ streamId`);
            const client = this.clientManager.getClient(clientId);
            if (client) {
                this.sendMessage(client.ws, {
                    type: MESSAGE_TYPES.ERROR,
                    message: ERRORS.MISSING_STREAM_ID,
                    timestamp: Date.now()
                });
            }
            return;
        }

        // –í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ —Ç–∏–ø –∫–ª—ñ—î–Ω—Ç–∞ —è–∫ viewer
        this.clientManager.setClientType(clientId, CLIENT_TYPES.VIEWER);

        // –î–æ–¥–∞—Ç–∏ –¥–æ –ø–æ—Ç–æ–∫—É
        const success = this.streamManager.addViewer(streamId, clientId);

        const client = this.clientManager.getClient(clientId);
        if (client) {
            if (success) {
                this.sendMessage(client.ws, {
                    type: MESSAGE_TYPES.JOINED_STREAM,
                    streamId,
                    timestamp: Date.now()
                });
            } else {
                this.sendMessage(client.ws, {
                    type: MESSAGE_TYPES.ERROR,
                    message: ERRORS.STREAM_NOT_FOUND,
                    timestamp: Date.now()
                });
            }
        }
    }

    private handleHeartbeat(clientId: string, message: any): void {
        const client = this.clientManager.getClient(clientId);
        if (client) {
            this.sendMessage(client.ws, {
                type: MESSAGE_TYPES.PONG,
                timestamp: Date.now()
            });
        }
    }

    private handleMetrics(clientId: string, message: any): void {
        logger.debug(`üìä –ú–µ—Ç—Ä–∏–∫–∏ –≤—ñ–¥ ${clientId}:`, message.data);
        // TODO: –ó–±–µ—Ä–µ–≥—Ç–∏ –º–µ—Ç—Ä–∏–∫–∏ –≤ –ë–î –∞–±–æ –ª–æ–≥–∞—Ö
    }

    private handleDisconnect(clientId: string): void {
        const client = this.clientManager.getClient(clientId);
        if (!client) return;

        logger.info(`üîå –ö–ª—ñ—î–Ω—Ç –≤—ñ–¥–∫–ª—é—á–∏–≤—Å—è: ${clientId} (${client.type})`);

        if (client.type === CLIENT_TYPES.CAPTURE) {
            // –í–∏–¥–∞–ª–∏—Ç–∏ –ø–æ—Ç—ñ–∫
            const stream = this.streamManager.getStreamByCaptureClient(clientId);
            if (stream) {
                // –ü–æ–≤—ñ–¥–æ–º–∏—Ç–∏ –≤—Å—ñ—Ö –≥–ª—è–¥–∞—á—ñ–≤ –ø—Ä–æ –∑–∞–∫—Ä–∏—Ç—Ç—è –ø–æ—Ç–æ–∫—É
                const viewers = this.streamManager.getViewersForStream(stream.streamId);
                for (const viewerId of viewers) {
                    const viewer = this.clientManager.getClient(viewerId);
                    if (viewer) {
                        this.sendMessage(viewer.ws, {
                            type: MESSAGE_TYPES.STREAM_ENDED,
                            streamId: stream.streamId,
                            timestamp: Date.now()
                        });
                    }
                }

                this.streamManager.removeStream(stream.streamId);
            }
        } else if (client.type === CLIENT_TYPES.VIEWER) {
            // –í–∏–¥–∞–ª–∏—Ç–∏ –∑ –ø–æ—Ç–æ–∫—É
            for (const stream of this.streamManager.getActiveStreams()) {
                if (stream.viewerIds.has(clientId)) {
                    this.streamManager.removeViewer(stream.streamId, clientId);
                }
            }
        }

        this.clientManager.removeClient(clientId);
    }

    private sendMessage(ws: WebSocket, message: any): void {
        if (ws.readyState === WebSocket.OPEN) {
            try {
                ws.send(JSON.stringify(message));
            } catch (error) {
                logger.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:', error);
            }
        }
    }

    private sendCommand(ws: WebSocket, command: any): void {
        this.sendMessage(ws, {
            type: MESSAGE_TYPES.COMMAND,
            command,
            timestamp: Date.now()
        });
    }
}
