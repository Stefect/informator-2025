/**
 * –†–µ–∞–ª—å–Ω–∏–π Capture Client –∑ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è–º NAPI –∞–¥–¥–æ–Ω—É
 * –ó–∞—Ö–æ–ø–ª—é—î —Å–ø—Ä–∞–≤–∂–Ω—ñ–π –µ–∫—Ä–∞–Ω —á–µ—Ä–µ–∑ DXGI
 */

const WebSocket = require('ws');
const path = require('path');

// –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ NAPI –∞–¥–¥–æ–Ω
let nativeCapture;
try {
    nativeCapture = require('./build/Release/screen_capture.node');
    console.log('‚úÖ NAPI –∞–¥–¥–æ–Ω –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ');
} catch (error) {
    console.error('‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ NAPI –∞–¥–¥–æ–Ω:', error.message);
    console.log('üí° –ó–∞–ø—É—Å—Ç—ñ—Ç—å: npm run build:native');
    process.exit(1);
}

const SERVER_URL = process.env.SERVER_URL || 'ws://localhost:3001';
let ws = null;
let captureInterval = null;
let frameNumber = 0;
let isInitialized = false;

console.log('üé• Real Capture Client (NAPI)');
console.log(`üîå –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ ${SERVER_URL}...`);

// –°–ø–æ—á–∞—Ç–∫—É —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ NAPI –∞–¥–¥–æ–Ω
function initializeCapture() {
    try {
        console.log('üöÄ –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∑–∞—Ö–æ–ø–ª–µ–Ω–Ω—è –µ–∫—Ä–∞–Ω—É (–ë–ï–ó –µ–Ω–∫–æ–¥–µ—Ä–∞)...');
        
        const result = nativeCapture.initialize({
            width: 1280,
            height: 720,
            fps: 30, // –ó–±—ñ–ª—å—à–µ–Ω–æ –¥–æ 30 FPS
            bitrate: 0, // –ù–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –µ–Ω–∫–æ–¥–µ—Ä
            useHardware: false
        });

        if (result.success) {
            console.log(`‚úÖ –ó–∞—Ö–æ–ø–ª–µ–Ω–Ω—è —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ: ${result.width}x${result.height} @ 30 FPS`);
            isInitialized = true;
            return true;
        } else {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó:', result.error);
            console.log('‚ö†Ô∏è –ü—Ä–æ–¥–æ–≤–∂—É—î–º–æ –∑ —Ç–µ—Å—Ç–æ–≤–∏–º–∏ –¥–∞–Ω–∏–º–∏...');
            return false;
        }
    } catch (error) {
        console.error('‚ùå –í–∏–Ω—è—Ç–æ–∫ –ø—Ä–∏ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó:', error.message);
        return false;
    }
}

// –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ WebSocket
ws = new WebSocket(SERVER_URL);

ws.on('open', () => {
    console.log('‚úÖ WebSocket –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ');
    
    // –í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—é —è–∫ capture_client
    const identification = {
        type: 'identification',
        clientType: 'capture_client',
        version: '2.0.0',
        platform: process.platform,
        hostname: require('os').hostname()
    };
    
    ws.send(JSON.stringify(identification));
    console.log('üì§ –Ü–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—é –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ (capture_client)');
});

ws.on('message', (data) => {
    try {
        const message = JSON.parse(data.toString());
        console.log(`üì• –û—Ç—Ä–∏–º–∞–Ω–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: ${message.type}`);
        
        switch (message.type) {
            case 'welcome':
                console.log(`üëã –í—ñ—Ç–∞—î–º–æ! Client ID: ${message.clientId}`);
                break;
                
            case 'stream_created':
                console.log(`üìπ –ü–æ—Ç—ñ–∫ —Å—Ç–≤–æ—Ä–µ–Ω–æ: ${message.streamId}`);
                console.log('‚ñ∂Ô∏è –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–π –∑–∞–ø—É—Å–∫ –∑–∞—Ö–æ–ø–ª–µ–Ω–Ω—è —á–µ—Ä–µ–∑ 1 —Å–µ–∫—É–Ω–¥—É...');
                
                // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ —Ç–∞ –ø–æ—á–∞—Ç–∏ –∑–∞—Ö–æ–ø–ª–µ–Ω–Ω—è
                setTimeout(() => {
                    initializeCapture();
                    startCapture();
                }, 1000);
                break;
                
            case 'command':
                handleCommand(message.command);
                break;
        }
    } catch (error) {
        // –ù–µ —Ç–µ–∫—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    }
});

ws.on('close', () => {
    console.log('‚ö†Ô∏è WebSocket –≤—ñ–¥–∫–ª—é—á–µ–Ω–æ');
    stopCapture();
    process.exit(0);
});

ws.on('error', (error) => {
    console.error('‚ùå WebSocket –ø–æ–º–∏–ª–∫–∞:', error.message);
    process.exit(1);
});

function handleCommand(command) {
    console.log(`üì® –û—Ç—Ä–∏–º–∞–Ω–æ –∫–æ–º–∞–Ω–¥—É: ${command.type}`);
    
    switch (command.type) {
        case 'start_capture':
            console.log('‚ñ∂Ô∏è –ö–æ–º–∞–Ω–¥–∞: –ø–æ—á–∞—Ç–∏ –∑–∞—Ö–æ–ø–ª–µ–Ω–Ω—è');
            if (!captureInterval) {
                initializeCapture();
                startCapture();
            }
            break;
            
        case 'stop_capture':
            console.log('‚èπÔ∏è –ö–æ–º–∞–Ω–¥–∞: –∑—É–ø–∏–Ω–∏—Ç–∏ –∑–∞—Ö–æ–ø–ª–µ–Ω–Ω—è');
            stopCapture();
            break;
    }
}

function startCapture() {
    if (captureInterval) {
        console.log('‚ö†Ô∏è –ó–∞—Ö–æ–ø–ª–µ–Ω–Ω—è –≤–∂–µ –∑–∞–ø—É—â–µ–Ω–æ');
        return;
    }
    
    console.log('‚ñ∂Ô∏è –ü–æ—á–∏–Ω–∞—î–º–æ –∑–∞—Ö–æ–ø–ª–µ–Ω–Ω—è –µ–∫—Ä–∞–Ω—É (30 FPS)...');
    frameNumber = 0;
    
    // –ó–∞—Ö–æ–ø–ª—é–≤–∞—Ç–∏ –∫–∞–¥—Ä–∏ –∑ —á–∞—Å—Ç–æ—Ç–æ—é 30 FPS
    captureInterval = setInterval(() => {
        captureAndSendFrame();
    }, 33); // ~33ms = 30 FPS
}

function stopCapture() {
    if (captureInterval) {
        clearInterval(captureInterval);
        captureInterval = null;
        console.log('‚èπÔ∏è –ó–∞—Ö–æ–ø–ª–µ–Ω–Ω—è –∑—É–ø–∏–Ω–µ–Ω–æ');
        
        // –û—á–∏—Å—Ç–∏—Ç–∏ NAPI —Ä–µ—Å—É—Ä—Å–∏
        try {
            nativeCapture.stopCapture();
        } catch (e) {
            // –Ü–≥–Ω–æ—Ä—É—î–º–æ –ø–æ–º–∏–ª–∫–∏ –ø—Ä–∏ –∑—É–ø–∏–Ω—Ü—ñ
        }
    }
}

function captureAndSendFrame() {
    frameNumber++;
    
    try {
        // –°–ø—Ä–æ–±—É–≤–∞—Ç–∏ –∑–∞—Ö–æ–ø–∏—Ç–∏ –∫–∞–¥—Ä —á–µ—Ä–µ–∑ NAPI
        const result = nativeCapture.captureFrame();
        
        if (result.success && result.data) {
            // –Ñ –¥–∞–Ω—ñ (–∑–∞–∫–æ–¥–æ–≤–∞–Ω—ñ –∞–±–æ RAW)
            const isEncoded = result.encoded || false;
            sendFrame(result.data, result.size, isEncoded);
        } else {
            // –ü–æ–º–∏–ª–∫–∞ –∑–∞—Ö–æ–ø–ª–µ–Ω–Ω—è –∞–±–æ –Ω–µ–º–∞—î –¥–∞–Ω–∏—Ö - –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Ç–µ—Å—Ç–æ–≤—ñ –¥–∞–Ω—ñ
            if (result.error && result.error !== 'NO_NEW_FRAME') {
                if (frameNumber % 50 === 0) {
                    console.log(`‚ö†Ô∏è ${result.error}`);
                }
            }
            sendTestFrame();
        }
    } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞—Ö–æ–ø–ª–µ–Ω–Ω—ñ:', error.message);
        sendTestFrame();
    }
}

function sendFrame(frameData, size, isEncoded) {
    const width = 1280; // –í—ñ–¥–ø–æ–≤—ñ–¥–∞—î —Ä–µ–∞–ª—å–Ω–æ–º—É —Ä–æ–∑–º—ñ—Ä—É
    const height = 720;
    
    // –ú–µ—Ç–∞–¥–∞–Ω—ñ –∫–∞–¥—Ä—É
    const metadata = {
        type: 'frame_metadata',
        width: width,
        height: height,
        timestamp: Date.now(),
        frameNumber: frameNumber,
        size: size,
        encoded: isEncoded,
        codec: isEncoded ? 'h264' : 'bgra'
    };
    
    // –í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –º–µ—Ç–∞–¥–∞–Ω—ñ
    ws.send(JSON.stringify(metadata));
    
    // –í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –±—ñ–Ω–∞—Ä–Ω—ñ –¥–∞–Ω—ñ
    ws.send(frameData);
    
    if (frameNumber % 25 === 0) {
        console.log(`üì§ –ö–∞–¥—Ä #${frameNumber} (${isEncoded ? 'H.264' : 'BGRA RAW'}, ${(size / 1024).toFixed(1)} KB)`);
    }
}

function sendTestFrame() {
    const width = 1920;
    const height = 1080;
    
    // –ú–µ—Ç–∞–¥–∞–Ω—ñ –∫–∞–¥—Ä—É
    const metadata = {
        type: 'frame_metadata',
        width: width,
        height: height,
        timestamp: Date.now(),
        frameNumber: frameNumber,
        size: 50000,
        encoded: false,
        codec: 'test'
    };
    
    // –í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –º–µ—Ç–∞–¥–∞–Ω—ñ
    ws.send(JSON.stringify(metadata));
    
    // –°—Ç–≤–æ—Ä–∏—Ç–∏ —Ç–µ—Å—Ç–æ–≤–∏–π –≥—Ä–∞–¥—ñ—î–Ω—Ç
    const frameData = Buffer.alloc(50000);
    const colorOffset = (frameNumber * 10) % 255;
    for (let i = 0; i < frameData.length; i++) {
        frameData[i] = (i + colorOffset) % 256;
    }
    
    // –í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –±—ñ–Ω–∞—Ä–Ω—ñ –¥–∞–Ω—ñ
    ws.send(frameData);
    
    if (frameNumber % 50 === 0) {
        console.log(`üì§ TEST –∫–∞–¥—Ä #${frameNumber} (50 KB)`);
    }
}

// –û–±—Ä–æ–±–∫–∞ Ctrl+C
process.on('SIGINT', () => {
    console.log('\n‚ö†Ô∏è –û—Ç—Ä–∏–º–∞–Ω–æ SIGINT');
    console.log('üëã –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ä–æ–±–æ—Ç–∏...');
    stopCapture();
    if (ws) {
        ws.close();
    }
    setTimeout(() => process.exit(0), 500);
});

console.log('\nüí° –ü—ñ–¥–∫–∞–∑–∫–∞:');
console.log('   –ü—ñ—Å–ª—è –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –ø–æ—á–Ω–µ –∑–∞—Ö–æ–ø–ª–µ–Ω–Ω—è –µ–∫—Ä–∞–Ω—É');
console.log('   –Ø–∫—â–æ NAPI –ø—Ä–∞—Ü—é—î - –æ—Ç—Ä–∏–º–∞—î—Ç–µ —Å–ø—Ä–∞–≤–∂–Ω—ñ–π –µ–∫—Ä–∞–Ω');
console.log('   –Ø–∫—â–æ –Ω—ñ - –æ—Ç—Ä–∏–º–∞—î—Ç–µ —Ç–µ—Å—Ç–æ–≤–∏–π –≥—Ä–∞–¥—ñ—î–Ω—Ç');
console.log('   Ctrl+C –¥–ª—è –∑—É–ø–∏–Ω–∫–∏\n');
