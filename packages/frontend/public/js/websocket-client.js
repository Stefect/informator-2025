/**
 * WebSocket Client –¥–ª—è –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Backend
 * (Vanilla JavaScript - –±–µ–∑ TypeScript)
 */

let ws = null;
let isConnected = false;
let reconnectTimeout = null;
let heartbeatInterval = null;
let streamId = null;
let startTime = null;

// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
let stats = {
    framesReceived: 0,
    framesDropped: 0,
    bytesReceived: 0,
    connectionTime: 0
};

function connect() {
    const serverUrl = document.getElementById('serverUrl').value;
    const streamIdValue = document.getElementById('streamIdInput').value;
    
    if (!serverUrl) {
        log('‚ùå –í–∫–∞–∂—ñ—Ç—å URL —Å–µ—Ä–≤–µ—Ä–∞');
        showError('–í–∫–∞–∂—ñ—Ç—å URL —Å–µ—Ä–≤–µ—Ä–∞');
        return;
    }

    log(`üîå –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ ${serverUrl}...`);
    updateStatus('connecting', '–ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è...');
    
    try {
        ws = new WebSocket(serverUrl);
        
        ws.binaryType = 'arraybuffer';
        
        ws.onopen = () => {
            isConnected = true;
            startTime = Date.now();
            updateStatus('connected', '–ü—ñ–¥–∫–ª—é—á–µ–Ω–æ');
            log('‚úÖ WebSocket –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ');
            
            // –í—ñ–¥–ø—Ä–∞–≤–∫–∞ —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó
            sendIdentification();
            
            // –ó–∞–ø—É—Å–∫ heartbeat
            startHeartbeat();
            
            // –Ø–∫—â–æ —î streamId, –ø—ñ–¥–∫–ª—é—á–∏—Ç–∏—Å—è –¥–æ –ø–æ—Ç–æ–∫—É
            if (streamIdValue) {
                joinStream(streamIdValue);
            } else {
                // –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω–∏—Ö —Å—Ç—Ä—ñ–º—ñ–≤
                log('‚è≥ –û—á—ñ–∫—É–≤–∞–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω–∏—Ö –ø–æ—Ç–æ–∫—ñ–≤...');
                // –§—É–Ω–∫—Ü—ñ—è –≤–∂–µ –≤–∏–∫–ª–∏–∫–∞—î—Ç—å—Å—è –≤ sendIdentification()
            }
            
            // –û–Ω–æ–≤–∏—Ç–∏ –∫–Ω–æ–ø–∫–∏
            document.getElementById('connectBtn').disabled = true;
            document.getElementById('disconnectBtn').disabled = false;
            document.getElementById('refreshBtn').disabled = false;
            
            hideError();
        };
        
        ws.onmessage = (event) => {
            // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ —Ü–µ —Ç–µ–∫—Å—Ç–æ–≤–µ —á–∏ –±—ñ–Ω–∞—Ä–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            if (event.data instanceof ArrayBuffer || event.data instanceof Blob) {
                // –ë—ñ–Ω–∞—Ä–Ω—ñ –¥–∞–Ω—ñ (–∫–∞–¥—Ä –≤—ñ–¥–µ–æ)
                handleBinaryFrame(event.data);
            } else if (typeof event.data === 'string') {
                // –¢–µ–∫—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
                try {
                    const message = JSON.parse(event.data);
                    handleTextMessage(message);
                } catch (error) {
                    log('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É JSON:', error);
                }
            }
        };
        
        ws.onclose = () => {
            handleDisconnect();
        };
        
        ws.onerror = (error) => {
            log('‚ùå WebSocket –ø–æ–º–∏–ª–∫–∞:', error);
            showError('–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ —Å–µ—Ä–≤–µ—Ä–∞');
        };
        
    } catch (error) {
        log('‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è WebSocket:', error);
        showError('–ù–µ –≤–¥–∞–ª–æ—Å—è –ø—ñ–¥–∫–ª—é—á–∏—Ç–∏—Å—è –¥–æ —Å–µ—Ä–≤–µ—Ä–∞');
    }
}

function disconnect() {
    log('üîå –í—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è...');
    
    stopHeartbeat();
    
    if (ws) {
        ws.close();
        ws = null;
    }
    
    isConnected = false;
    updateStatus('disconnected', '–í—ñ–¥–∫–ª—é—á–µ–Ω–æ');
    
    // –û–Ω–æ–≤–∏—Ç–∏ –∫–Ω–æ–ø–∫–∏
    document.getElementById('connectBtn').disabled = false;
    document.getElementById('disconnectBtn').disabled = true;
    document.getElementById('refreshBtn').disabled = true;
    
    // –ó—É–ø–∏–Ω–∏—Ç–∏ –≤—ñ–¥–µ–æ
    stopVideo();
}

function handleDisconnect() {
    log('‚ö†Ô∏è WebSocket –≤—ñ–¥–∫–ª—é—á–µ–Ω–æ');
    isConnected = false;
    updateStatus('disconnected', '–í—ñ–¥–∫–ª—é—á–µ–Ω–æ');
    
    stopHeartbeat();
    stopVideo();
    
    // –û–Ω–æ–≤–∏—Ç–∏ –∫–Ω–æ–ø–∫–∏
    document.getElementById('connectBtn').disabled = false;
    document.getElementById('disconnectBtn').disabled = true;
    
    // –°–ø—Ä–æ–±–∞ –ø–µ—Ä–µ–ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
    scheduleReconnect();
}

function scheduleReconnect() {
    if (reconnectTimeout) return;
    
    log('üîÑ –ü–µ—Ä–µ–ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥...');
    
    reconnectTimeout = setTimeout(() => {
        reconnectTimeout = null;
        connect();
    }, 5000);
}

function reconnect() {
    disconnect();
    setTimeout(() => {
        connect();
    }, 500);
}

function sendIdentification() {
    const message = {
        type: 'identification',
        clientType: 'viewer',
        version: '2.0.0',
        userAgent: navigator.userAgent,
        timestamp: Date.now()
    };
    
    log('üì§ –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—é —è–∫ viewer...');
    sendMessage(message);
    log('‚úÖ –Ü–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—é –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ');
    
    // –ß–µ—Ä–µ–∑ 500ms –∑–∞–ø–∏—Ç–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω–∏—Ö –ø–æ—Ç–æ–∫—ñ–≤
    setTimeout(() => {
        requestAvailableStreams();
    }, 500);
}

function requestAvailableStreams() {
    // –ó–∞–ø–∏—Ç –¥–æ HTTP API –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É –ø–æ—Ç–æ–∫—ñ–≤
    const serverUrl = document.getElementById('serverUrl').value;
    const httpUrl = serverUrl.replace('ws://', 'http://').replace('wss://', 'https://');
    
    log('üîç –ó–∞–ø–∏—Ç –∞–∫—Ç–∏–≤–Ω–∏—Ö –ø–æ—Ç–æ–∫—ñ–≤...');
    
    fetch(`${httpUrl}/api/streams`)
        .then(response => response.json())
        .then(data => {
            log(`üìä –û—Ç—Ä–∏–º–∞–Ω–æ ${data.streams.length} –ø–æ—Ç–æ–∫—ñ–≤`);
            
            if (data.streams.length > 0) {
                const firstStream = data.streams[0];
                log(`üéØ –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –ø–æ—Ç–æ–∫—É: ${firstStream.streamId}`);
                joinStream(firstStream.streamId);
            } else {
                log('‚è≥ –ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö –ø–æ—Ç–æ–∫—ñ–≤. –û—á—ñ–∫—É–≤–∞–Ω–Ω—è...');
            }
        })
        .catch(error => {
            log('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Ç—É –ø–æ—Ç–æ–∫—ñ–≤:', error);
        });
}

function joinStream(streamIdValue) {
    const message = {
        type: 'join_stream',
        streamId: streamIdValue,
        timestamp: Date.now()
    };
    
    sendMessage(message);
    log(`üì∫ –ü—Ä–∏—î–¥–Ω–∞–Ω–Ω—è –¥–æ –ø–æ—Ç–æ–∫—É: ${streamIdValue}`);
    
    streamId = streamIdValue;
    updateStreamId(streamIdValue);
}

function handleTextMessage(message) {
    log(`üì• –û—Ç—Ä–∏–º–∞–Ω–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: ${message.type}`, message);
    
    switch (message.type) {
        case 'welcome':
            log(`üëã –í—ñ—Ç–∞—î–º–æ! Client ID: ${message.clientId}`);
            break;
            
        case 'stream_created':
            log(`üìπ –ü–æ—Ç—ñ–∫ —Å—Ç–≤–æ—Ä–µ–Ω–æ: ${message.streamId}`);
            streamId = message.streamId;
            updateStreamId(message.streamId);
            joinStream(message.streamId);
            break;
            
        case 'joined_stream':
            log(`‚úÖ –ü—Ä–∏—î–¥–Ω–∞–ª–∏—Å—è –¥–æ –ø–æ—Ç–æ–∫—É: ${message.streamId}`);
            showLoading();
            break;
            
        case 'frame_metadata':
            handleFrameMetadata(message);
            break;
            
        case 'stream_ended':
            log('‚ö†Ô∏è –ü–æ—Ç—ñ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
            showError('–ü–æ—Ç—ñ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
            stopVideo();
            break;
            
        case 'error':
            log(`‚ùå –ü–æ–º–∏–ª–∫–∞: ${message.message}`);
            showError(message.message);
            break;
            
        case 'pong':
            // –í—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ heartbeat
            break;
            
        default:
            log(`‚ö†Ô∏è –ù–µ–≤—ñ–¥–æ–º–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: ${message.type}`);
    }
}

let pendingMetadata = null;

function handleFrameMetadata(metadata) {
    pendingMetadata = metadata;
    
    // –û–Ω–æ–≤–∏—Ç–∏ —Ä–æ–∑–¥—ñ–ª—å–Ω—ñ—Å—Ç—å
    updateResolution(metadata.width, metadata.height);
}

function handleBinaryFrame(arrayBuffer) {
    if (!pendingMetadata) {
        log('‚ö†Ô∏è –û—Ç—Ä–∏–º–∞–Ω–æ –∫–∞–¥—Ä –±–µ–∑ –º–µ—Ç–∞–¥–∞–Ω–∏—Ö');
        return;
    }
    
    const frameData = new Uint8Array(arrayBuffer);
    
    // –û–Ω–æ–≤–∏—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    stats.framesReceived++;
    stats.bytesReceived += frameData.length;
    
    updateStats();
    
    // –ü–µ—Ä–µ–¥–∞—Ç–∏ –∫–∞–¥—Ä —É –≤—ñ–¥–µ–æ–ø–ª–µ—î—Ä
    onFrameReceived(frameData, pendingMetadata);
    
    pendingMetadata = null;
    
    hideLoading();
}

function sendMessage(message) {
    if (ws && ws.readyState === WebSocket.OPEN) {
        ws.send(JSON.stringify(message));
    }
}

function startHeartbeat() {
    heartbeatInterval = setInterval(() => {
        if (isConnected && ws && ws.readyState === WebSocket.OPEN) {
            sendMessage({
                type: 'heartbeat',
                timestamp: Date.now()
            });
        }
    }, 30000); // –ö–æ–∂–Ω—ñ 30 —Å–µ–∫—É–Ω–¥
}

function stopHeartbeat() {
    if (heartbeatInterval) {
        clearInterval(heartbeatInterval);
        heartbeatInterval = null;
    }
}

// –û–Ω–æ–≤–ª–µ–Ω–Ω—è UI
function updateStatus(status, text) {
    const statusElement = document.getElementById('connectionStatus');
    statusElement.textContent = text;
    statusElement.className = `status-value ${status}`;
}

function updateStreamId(id) {
    document.getElementById('streamId').textContent = id || '-';
}

function updateResolution(width, height) {
    document.getElementById('resolution').textContent = `${width}x${height}`;
}

function updateStats() {
    document.getElementById('framesReceived').textContent = stats.framesReceived;
    document.getElementById('framesDropped').textContent = stats.framesDropped;
    document.getElementById('bytesReceived').textContent = 
        (stats.bytesReceived / 1024 / 1024).toFixed(2) + ' MB';
    
    if (startTime) {
        const elapsed = Math.floor((Date.now() - startTime) / 1000);
        document.getElementById('connectionTime').textContent = elapsed + 's';
    }
}

function showLoading() {
    document.getElementById('loadingOverlay').style.display = 'flex';
}

function hideLoading() {
    document.getElementById('loadingOverlay').style.display = 'none';
}

function showError(message) {
    const errorOverlay = document.getElementById('errorOverlay');
    document.getElementById('errorMessage').textContent = message;
    errorOverlay.style.display = 'flex';
}

function hideError() {
    document.getElementById('errorOverlay').style.display = 'none';
}

function log(message, ...args) {
    const logContainer = document.getElementById('logContainer');
    const timestamp = new Date().toISOString().split('T')[1].split('.')[0];
    const logEntry = document.createElement('div');
    logEntry.className = 'log-entry';
    logEntry.textContent = `[${timestamp}] ${message}`;
    
    if (args.length > 0) {
        logEntry.textContent += ' ' + JSON.stringify(args);
    }
    
    logContainer.appendChild(logEntry);
    logContainer.scrollTop = logContainer.scrollHeight;
    
    console.log(message, ...args);
}

function clearLog() {
    document.getElementById('logContainer').innerHTML = '';
}

function refreshStreams() {
    log('üîÑ –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å–ø–∏—Å–∫—É —Å—Ç—Ä—ñ–º—ñ–≤...');
    requestAvailableStreams();
}

// –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–æ–∂–Ω—É —Å–µ–∫—É–Ω–¥—É
setInterval(() => {
    if (isConnected) {
        updateStats();
    }
}, 1000);
