import WebSocket from 'ws';
import { performance } from 'perf_hooks';
import * as fs from 'fs';
import * as path from 'path';

// –Ü–º–ø–æ—Ä—Ç –Ω–∞—Ç–∏–≤–Ω–æ–≥–æ –º–æ–¥—É–ª—è
let screenCapture: any;
try {
    screenCapture = require('../screen_capture.node');
} catch (error) {
    console.error('‚ùå –ù–∞—Ç–∏–≤–Ω–∏–π –º–æ–¥—É–ª—å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –í–∏–∫–æ–Ω–∞–π—Ç–µ: npm run build:native');
    process.exit(1);
}

interface CaptureConfig {
    fps: number;
    quality: number;
    serverUrl: string;
    reconnectDelay: number;
    logPerformance: boolean;
    enableRecording: boolean;
    recordingPath: string;
}

interface PerformanceMetrics {
    captureTime: number;
    compressionTime: number;
    transmissionTime: number;
    frameSize: number;
    memoryUsage: NodeJS.MemoryUsage;
    totalFrames: number;
    droppedFrames: number;
}

class AdvancedScreenCaptureClient {
    private ws: WebSocket | null = null;
    private config: CaptureConfig;
    private captureInterval: NodeJS.Timeout | null = null;
    private isCapturing = false;
    private reconnectTimeout: NodeJS.Timeout | null = null;
    private metrics: PerformanceMetrics;
    private lastFrameTime = 0;
    private isConnected = false;
    private recordingStream: fs.WriteStream | null = null;
    private startTime = Date.now();

    constructor(config: Partial<CaptureConfig> = {}) {
        this.config = {
            fps: 30, // –ú—ñ–Ω—ñ–º—É–º 30 FPS –∑–≥—ñ–¥–Ω–æ –≤–∏–º–æ–≥ –∫–æ–Ω–∫—É—Ä—Å—É
            quality: 75, // –ó–Ω–∏–∂—É—î–º–æ —è–∫—ñ—Å—Ç—å –¥–ª—è –∫—Ä–∞—â–æ—ó –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
            serverUrl: 'ws://localhost:3001',
            reconnectDelay: 5000,
            logPerformance: true,
            enableRecording: false,
            recordingPath: './recordings',
            ...config
        };

        this.metrics = {
            captureTime: 0,
            compressionTime: 0,
            transmissionTime: 0,
            frameSize: 0,
            memoryUsage: process.memoryUsage(),
            totalFrames: 0,
            droppedFrames: 0
        };

        this.initializeNativeCapture();
        this.setupPerformanceLogging();
        this.setupRecording();
    }

    private initializeNativeCapture(): void {
        const success = screenCapture.initCapture();
        if (!success) {
            throw new Error('‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ –Ω–∞—Ç–∏–≤–Ω–µ –∑–∞—Ö–æ–ø–ª–µ–Ω–Ω—è –µ–∫—Ä–∞–Ω—É');
        }

        const screenInfo = screenCapture.getScreenInfo();
        console.log(`üì∫ –ï–∫—Ä–∞–Ω —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ: ${screenInfo.width}x${screenInfo.height}`);
    }

    private setupPerformanceLogging(): void {
        if (!this.config.logPerformance) return;

        setInterval(() => {
            this.logPerformanceMetrics();
        }, 10000); // –ö–æ–∂–Ω—ñ 10 —Å–µ–∫—É–Ω–¥
    }

    private setupRecording(): void {
        if (!this.config.enableRecording) return;

        if (!fs.existsSync(this.config.recordingPath)) {
            fs.mkdirSync(this.config.recordingPath, { recursive: true });
        }

        const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
        const recordingFile = path.join(this.config.recordingPath, `capture-${timestamp}.mjpeg`);
        
        this.recordingStream = fs.createWriteStream(recordingFile);
        console.log(`üé• –ó–∞–ø–∏—Å —É–≤—ñ–º–∫–Ω–µ–Ω–æ: ${recordingFile}`);
    }

    public async connect(): Promise<void> {
        if (this.ws && this.ws.readyState === WebSocket.OPEN) {
            return;
        }

        try {
            this.ws = new WebSocket(this.config.serverUrl);

            this.ws.on('open', () => {
                console.log('üîó –ü—ñ–¥–∫–ª—é—á–µ–Ω–æ –¥–æ —Å–µ—Ä–≤–µ—Ä–∞');
                this.isConnected = true;
                this.clearReconnectTimeout();
                
                // –ü–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ —Å–µ—Ä–≤–µ—Ä –ø—Ä–æ –≥–æ—Ç–æ–≤–Ω—ñ—Å—Ç—å
                this.ws?.send(JSON.stringify({
                    type: 'client_ready',
                    capabilities: {
                        screen: screenCapture.getScreenInfo(),
                        fps: this.config.fps,
                        quality: this.config.quality
                    }
                }));
            });

            this.ws.on('message', (data) => {
                try {
                    const message = JSON.parse(data.toString());
                    this.handleServerMessage(message);
                } catch (error) {
                    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Å–µ—Ä–≤–µ—Ä–∞:', error);
                }
            });

            this.ws.on('close', () => {
                console.log('‚ùå –ó\'—î–¥–Ω–∞–Ω–Ω—è –∑–∞–∫—Ä–∏—Ç–æ');
                this.isConnected = false;
                this.stopCapture();
                this.scheduleReconnect();
            });

            this.ws.on('error', (error) => {
                console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ WebSocket:', error);
                this.isConnected = false;
            });

        } catch (error) {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è:', error);
            this.scheduleReconnect();
        }
    }

    private handleServerMessage(message: any): void {
        switch (message.type) {
            case 'start_capture':
                console.log('üé¨ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—Ä–æ—Å–∏–≤ –ø–æ—á–∞—Ç–æ–∫ –∑–∞—Ö–æ–ø–ª–µ–Ω–Ω—è');
                this.startCapture();
                break;
                
            case 'stop_capture':
                console.log('‚èπÔ∏è –°–µ—Ä–≤–µ—Ä –∑–∞–ø—Ä–æ—Å–∏–≤ –∑—É–ø–∏–Ω–∫—É –∑–∞—Ö–æ–ø–ª–µ–Ω–Ω—è');
                this.stopCapture();
                break;
                
            case 'config_update':
                console.log('‚öôÔ∏è –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó –≤—ñ–¥ —Å–µ—Ä–≤–µ—Ä–∞');
                this.updateConfig(message.config);
                break;
                
            case 'pong':
                // Heartbeat response
                break;
                
            default:
                console.log('üì® –ù–µ–≤—ñ–¥–æ–º–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ —Å–µ—Ä–≤–µ—Ä–∞:', message.type);
        }
    }

    private updateConfig(newConfig: Partial<CaptureConfig>): void {
        const oldFps = this.config.fps;
        this.config = { ...this.config, ...newConfig };
        
        // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∑–∞—Ö–æ–ø–ª–µ–Ω–Ω—è –ø—Ä–∏ –∑–º—ñ–Ω—ñ FPS
        if (newConfig.fps && newConfig.fps !== oldFps && this.isCapturing) {
            this.stopCapture();
            setTimeout(() => this.startCapture(), 100);
        }
    }

    public startCapture(): void {
        if (this.isCapturing) return;

        console.log(`üé• –ü–æ—á–∞—Ç–æ–∫ –∑–∞—Ö–æ–ø–ª–µ–Ω–Ω—è –µ–∫—Ä–∞–Ω—É –∑ ${this.config.fps} FPS`);
        this.isCapturing = true;
        this.lastFrameTime = performance.now();
        
        const frameInterval = 1000 / this.config.fps;
        
        this.captureInterval = setInterval(() => {
            this.captureAndSendFrame();
        }, frameInterval);
    }

    public stopCapture(): void {
        if (!this.isCapturing) return;

        console.log('‚èπÔ∏è –ó—É–ø–∏–Ω–∫–∞ –∑–∞—Ö–æ–ø–ª–µ–Ω–Ω—è –µ–∫—Ä–∞–Ω—É');
        this.isCapturing = false;
        
        if (this.captureInterval) {
            clearInterval(this.captureInterval);
            this.captureInterval = null;
        }
    }

    private captureAndSendFrame(): void {
        if (!this.isConnected || !this.ws || this.ws.readyState !== WebSocket.OPEN) {
            return;
        }

        const captureStart = performance.now();
        
        try {
            // –ó–∞—Ö–æ–ø–ª—é—î–º–æ –µ–∫—Ä–∞–Ω (DXGI –≤–∂–µ –æ–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–∏–π –¥–ª—è –ø—Ä–æ–ø—É—Å–∫—É –ø—É—Å—Ç–∏—Ö –∫–∞–¥—Ä—ñ–≤)
            const frameBuffer = screenCapture.captureScreen();
            
            if (!frameBuffer || frameBuffer.length === 0) {
                // –ù–µ–º–∞—î –Ω–æ–≤–æ–≥–æ –∫–∞–¥—Ä—É –∞–±–æ –ø–æ–º–∏–ª–∫–∞ - —Ü–µ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è DXGI
                return;
            }

            const captureEnd = performance.now();
            this.metrics.captureTime = captureEnd - captureStart;

            // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
            const transmissionStart = performance.now();
            
            this.ws.send(frameBuffer);
            
            const transmissionEnd = performance.now();
            this.metrics.transmissionTime = transmissionEnd - transmissionStart;

            // –ó–∞–ø–∏—Å—É—î–º–æ —É —Ñ–∞–π–ª (—è–∫—â–æ —É–≤—ñ–º–∫–Ω–µ–Ω–æ)
            if (this.recordingStream) {
                this.recordingStream.write(frameBuffer);
            }

            // –û–Ω–æ–≤–ª—é—î–º–æ –º–µ—Ç—Ä–∏–∫–∏
            this.metrics.frameSize = frameBuffer.length;
            this.metrics.totalFrames++;
            this.metrics.memoryUsage = process.memoryUsage();

            this.lastFrameTime = performance.now();

        } catch (error) {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞—Ö–æ–ø–ª–µ–Ω–Ω—è –∫–∞–¥—Ä—É:', error);
            this.metrics.droppedFrames++;
        }
    }

    private logPerformanceMetrics(): void {
        const uptime = Date.now() - this.startTime;
        const fps = this.metrics.totalFrames / (uptime / 1000);
        const dropRate = (this.metrics.droppedFrames / this.metrics.totalFrames) * 100;

        console.log(`
üìä === –ú–ï–¢–†–ò–ö–ò –ü–†–û–î–£–ö–¢–ò–í–ù–û–°–¢–Ü ===
‚è±Ô∏è  –ß–∞—Å —Ä–æ–±–æ—Ç–∏: ${Math.round(uptime / 1000)}—Å
üéØ FPS (—Ñ–∞–∫—Ç): ${fps.toFixed(2)}
üì∫ –ö–∞–¥—Ä—ñ–≤ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ: ${this.metrics.totalFrames}
‚ùå –í—Ç—Ä–∞—á–µ–Ω–∏—Ö –∫–∞–¥—Ä—ñ–≤: ${this.metrics.droppedFrames} (${dropRate.toFixed(1)}%)
‚ö° –ß–∞—Å –∑–∞—Ö–æ–ø–ª–µ–Ω–Ω—è: ${this.metrics.captureTime.toFixed(2)}–º—Å
üì° –ß–∞—Å –ø–µ—Ä–µ–¥–∞—á—ñ: ${this.metrics.transmissionTime.toFixed(2)}–º—Å
üì¶ –†–æ–∑–º—ñ—Ä –∫–∞–¥—Ä—É: ${(this.metrics.frameSize / 1024).toFixed(1)}–ö–ë
üß† –ü–∞–º'—è—Ç—å: ${(this.metrics.memoryUsage.heapUsed / 1024 / 1024).toFixed(1)}–ú–ë
================================`);
    }

    private scheduleReconnect(): void {
        if (this.reconnectTimeout) return;
        
        console.log(`üîÑ –°–ø—Ä–æ–±–∞ –ø–µ—Ä–µ–ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è —á–µ—Ä–µ–∑ ${this.config.reconnectDelay}–º—Å`);
        
        this.reconnectTimeout = setTimeout(() => {
            this.reconnectTimeout = null;
            this.connect();
        }, this.config.reconnectDelay);
    }

    private clearReconnectTimeout(): void {
        if (this.reconnectTimeout) {
            clearTimeout(this.reconnectTimeout);
            this.reconnectTimeout = null;
        }
    }

    public disconnect(): void {
        console.log('üîå –í—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –≤—ñ–¥ —Å–µ—Ä–≤–µ—Ä–∞');
        
        this.stopCapture();
        this.clearReconnectTimeout();
        
        if (this.ws) {
            this.ws.close();
            this.ws = null;
        }
        
        if (this.recordingStream) {
            this.recordingStream.end();
            this.recordingStream = null;
        }
        
        this.isConnected = false;
    }

    public cleanup(): void {
        this.disconnect();
        
        try {
            screenCapture.cleanupCapture();
        } catch (error) {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—á–∏—â–µ–Ω–Ω—è –Ω–∞—Ç–∏–≤–Ω–æ–≥–æ –º–æ–¥—É–ª—è:', error);
        }
    }

    public getMetrics(): PerformanceMetrics {
        return { ...this.metrics };
    }

    public setFPS(fps: number): void {
        this.config.fps = Math.max(1, Math.min(60, fps));
        
        if (this.isCapturing) {
            this.stopCapture();
            setTimeout(() => this.startCapture(), 100);
        }
    }
}

// –ó–∞–ø—É—Å–∫ –∫–ª—ñ—î–Ω—Ç–∞
if (require.main === module) {
    console.log(`
üñ•Ô∏è ===== INFORMATOR CAPTURE CLIENT =====
üéØ –ü—Ä–æ—Ñ–µ—Å—ñ–π–Ω–∞ —Å–∏—Å—Ç–µ–º–∞ –∑–∞—Ö–æ–ø–ª–µ–Ω–Ω—è –µ–∫—Ä–∞–Ω—É
‚ö° –û–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–∞ –¥–ª—è –º—ñ–Ω—ñ–º–∞–ª—å–Ω–æ–≥–æ —Å–ø–æ–∂–∏–≤–∞–Ω–Ω—è —Ä–µ—Å—É—Ä—Å—ñ–≤
========================================
    `);

    const client = new AdvancedScreenCaptureClient({
        fps: process.env.FPS ? parseInt(process.env.FPS) : 10,
        quality: 85,
        logPerformance: true,
        enableRecording: process.env.RECORD === 'true',
        serverUrl: process.env.SERVER_URL || 'ws://localhost:3001'
    });

    // Graceful shutdown
    process.on('SIGINT', () => {
        console.log('\nüõë –û—Ç—Ä–∏–º–∞–Ω–æ —Å–∏–≥–Ω–∞–ª –∑—É–ø–∏–Ω–∫–∏...');
        client.cleanup();
        setTimeout(() => process.exit(0), 1000);
    });

    process.on('SIGTERM', () => {
        console.log('\nüõë –û—Ç—Ä–∏–º–∞–Ω–æ —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è...');
        client.cleanup();
        process.exit(0);
    });

    // –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è
    client.connect().catch(console.error);

    // –ö–æ–º–∞–Ω–¥–∏ —á–µ—Ä–µ–∑ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É
    process.stdin.setRawMode(true);
    process.stdin.resume();
    process.stdin.on('data', (key) => {
        const keyStr = key.toString();
        
        switch (keyStr) {
            case 's':
                client.startCapture();
                break;
            case 'q':
                client.stopCapture();
                break;
            case '+':
                const currentFPS = client.getMetrics().totalFrames > 0 ? 
                    client.getMetrics().totalFrames / ((Date.now() - client['startTime']) / 1000) : 10;
                client.setFPS(Math.min(60, Math.round(currentFPS) + 1));
                console.log(`üìà FPS –∑–±—ñ–ª—å—à–µ–Ω–æ`);
                break;
            case '-':
                const currentFPS2 = client.getMetrics().totalFrames > 0 ? 
                    client.getMetrics().totalFrames / ((Date.now() - client['startTime']) / 1000) : 10;
                client.setFPS(Math.max(1, Math.round(currentFPS2) - 1));
                console.log(`üìâ FPS –∑–º–µ–Ω—à–µ–Ω–æ`);
                break;
            case '\u0003': // Ctrl+C
                client.cleanup();
                process.exit(0);
                break;
        }
    });

    console.log(`
‚å®Ô∏è  –ö–æ–º–∞–Ω–¥–∏ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è:
   s - –°—Ç–∞—Ä—Ç –∑–∞—Ö–æ–ø–ª–µ–Ω–Ω—è
   q - –°—Ç–æ–ø –∑–∞—Ö–æ–ø–ª–µ–Ω–Ω—è  
   + - –ó–±—ñ–ª—å—à–∏—Ç–∏ FPS
   - - –ó–º–µ–Ω—à–∏—Ç–∏ FPS
   Ctrl+C - –í–∏—Ö—ñ–¥
    `);
}

export default AdvancedScreenCaptureClient;