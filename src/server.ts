import express from 'express';
import { WebSocketServer, WebSocket } from 'ws';
import { createServer } from 'http';
import path from 'path';

const app = express();
const server = createServer(app);
const wss = new WebSocketServer({ server });

const PORT = process.env.PORT || 3001;

// –°—Ç–∞—Ç–∏—á–Ω—ñ —Ñ–∞–π–ª–∏
app.use(express.static(path.join(__dirname, '..')));

// –ì–æ–ª–æ–≤–Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞
app.get('/', (req, res) => {
    res.sendFile(path.join(__dirname, '..', 'index.html'));
});

// WebSocket –∑'—î–¥–Ω–∞–Ω–Ω—è
const connectedClients = new Set<WebSocket>();

wss.on('connection', (ws, req) => {
    const clientIP = req.socket.remoteAddress || 'unknown';
    console.log(`[Server] –ù–æ–≤–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –≤—ñ–¥ ${clientIP}`);
    
    connectedClients.add(ws);

    // –í—ñ–¥–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    ws.send(JSON.stringify({
        type: 'connected',
        message: '–ü—ñ–¥–∫–ª—é—á–µ–Ω–æ –¥–æ —Å–µ—Ä–≤–µ—Ä–∞ Informator',
        timestamp: new Date().toISOString()
    }));

    // –û–±—Ä–æ–±–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –≤—ñ–¥ –∫–ª—ñ—î–Ω—Ç–∞
    ws.on('message', (data) => {
        try {
            const message = JSON.parse(data.toString());
            console.log(`[Server] –û—Ç—Ä–∏–º–∞–Ω–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:`, message.type);
            
            switch (message.type) {
                case 'ping':
                    ws.send(JSON.stringify({ type: 'pong', timestamp: new Date().toISOString() }));
                    break;
                    
                case 'screen_data':
                    // –ü–µ—Ä–µ–¥–∞—á–∞ —Å–∫—Ä—ñ–Ω—à–æ—Ç—É —ñ–Ω—à–∏–º –∫–ª—ñ—î–Ω—Ç–∞–º
                    broadcastToClients(data, ws);
                    break;
                    
                default:
                    console.log(`[Server] –ù–µ–≤—ñ–¥–æ–º–∏–π —Ç–∏–ø –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: ${message.type}`);
            }
        } catch (error) {
            console.error('[Server] –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:', error);
        }
    });

    // –û–±—Ä–æ–±–∫–∞ –≤—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è
    ws.on('close', () => {
        connectedClients.delete(ws);
        console.log(`[Server] –ö–ª—ñ—î–Ω—Ç –≤—ñ–¥–∫–ª—é—á–∏–≤—Å—è. –ó–∞–ª–∏—à–∏–ª–æ—Å—å: ${connectedClients.size}`);
    });

    // –û–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–æ–∫
    ws.on('error', (error) => {
        console.error('[Server] –ü–æ–º–∏–ª–∫–∞ WebSocket:', error);
        connectedClients.delete(ws);
    });
});

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏ –¥–∞–Ω–∏—Ö –≤—Å—ñ–º –∫–ª—ñ—î–Ω—Ç–∞–º
function broadcastToClients(data: any, sender?: WebSocket) {
    connectedClients.forEach((client) => {
        if (client !== sender && client.readyState === WebSocket.OPEN) {
            try {
                client.send(data);
            } catch (error) {
                console.error('[Server] –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–∏—Ö –∫–ª—ñ—î–Ω—Ç—É:', error);
                connectedClients.delete(client);
            }
        }
    });
}

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
server.listen(PORT, () => {
    console.log(`
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë         üñ•Ô∏è  INFORMATOR SERVER        ‚ïë
‚ïë                                      ‚ïë
‚ïë  Server running on: http://localhost:${PORT}  ‚ïë
‚ïë  WebSocket: ws://localhost:${PORT}           ‚ïë
‚ïë                                      ‚ïë
‚ïë  üìä Status: READY                    ‚ïë
‚ïë  üîó Connections: 0                   ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
    `);
});

// Graceful shutdown
process.on('SIGINT', () => {
    console.log('\n[Server] –û—Ç—Ä–∏–º–∞–Ω–æ —Å–∏–≥–Ω–∞–ª SIGINT. –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ä–æ–±–æ—Ç–∏...');
    
    // –ó–∞–∫—Ä–∏—Ç–∏ –≤—Å—ñ WebSocket –∑'—î–¥–Ω–∞–Ω–Ω—è
    connectedClients.forEach((ws) => {
        ws.close(1000, 'Server shutdown');
    });
    
    server.close(() => {
        console.log('[Server] –°–µ—Ä–≤–µ—Ä –∑—É–ø–∏–Ω–µ–Ω–æ');
        process.exit(0);
    });
});

export default app;