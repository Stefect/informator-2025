// –¢–µ—Å—Ç –Ω–∞—Ç–∏–≤–Ω–æ–≥–æ –º–æ–¥—É–ª—è –∑–∞—Ö–æ–ø–ª–µ–Ω–Ω—è –µ–∫—Ä–∞–Ω—É
const path = require('path');

console.log('üß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –Ω–∞—Ç–∏–≤–Ω–æ–≥–æ –º–æ–¥—É–ª—è –∑–∞—Ö–æ–ø–ª–µ–Ω–Ω—è –µ–∫—Ä–∞–Ω—É...\n');

try {
    // –ü—Ä–æ–±—É—î–º–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –Ω–∞—Ç–∏–≤–Ω–∏–π –º–æ–¥—É–ª—å
    const screenCapture = require('../native/build/Release/screen_capture.node');
    console.log('‚úÖ –ù–∞—Ç–∏–≤–Ω–∏–π –º–æ–¥—É–ª—å –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ');

    // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è
    const initResult = screenCapture.initCapture();
    if (initResult) {
        console.log('‚úÖ –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —É—Å–ø—ñ—à–Ω–∞');

        // –û—Ç—Ä–∏–º—É—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –µ–∫—Ä–∞–Ω
        const screenInfo = screenCapture.getScreenInfo();
        console.log(`üì∫ –†–æ–∑–¥—ñ–ª—å–Ω–∞ –∑–¥–∞—Ç–Ω—ñ—Å—Ç—å –µ–∫—Ä–∞–Ω—É: ${screenInfo.width}x${screenInfo.height}`);

        // –¢–µ—Å—Ç—É—î–º–æ –∑–∞—Ö–æ–ø–ª–µ–Ω–Ω—è –∫–∞–¥—Ä—É
        console.log('üì∏ –¢–µ—Å—Ç—É—î–º–æ –∑–∞—Ö–æ–ø–ª–µ–Ω–Ω—è –∫–∞–¥—Ä—É...');
        const startTime = Date.now();
        
        const frameBuffer = screenCapture.captureScreen();
        
        const captureTime = Date.now() - startTime;
        
        if (frameBuffer && frameBuffer.length > 0) {
            console.log(`‚úÖ –ö–∞–¥—Ä –∑–∞—Ö–æ–ø–ª–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ!`);
            console.log(`üì¶ –†–æ–∑–º—ñ—Ä –∫–∞–¥—Ä—É: ${(frameBuffer.length / 1024).toFixed(1)} –ö–ë`);
            console.log(`‚ö° –ß–∞—Å –∑–∞—Ö–æ–ø–ª–µ–Ω–Ω—è: ${captureTime}–º—Å`);
            
            // –¢–µ—Å—Ç FPS
            console.log('\nüéØ –¢–µ—Å—Ç –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ (10 –∫–∞–¥—Ä—ñ–≤)...');
            const frameCount = 10;
            const fpsTestStart = Date.now();
            
            for (let i = 0; i < frameCount; i++) {
                const frame = screenCapture.captureScreen();
                if (!frame || frame.length === 0) {
                    console.log(`‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞—Ö–æ–ø–ª–µ–Ω–Ω—è –∫–∞–¥—Ä—É ${i + 1}`);
                    break;
                }
                
                // –ù–µ–≤–µ–ª–∏–∫–∞ –∑–∞—Ç—Ä–∏–º–∫–∞ –º—ñ–∂ –∫–∞–¥—Ä–∞–º–∏
                await new Promise(resolve => setTimeout(resolve, 50));
            }
            
            const fpsTestTime = Date.now() - fpsTestStart;
            const avgFps = (frameCount / (fpsTestTime / 1000)).toFixed(2);
            const avgFrameTime = (fpsTestTime / frameCount).toFixed(2);
            
            console.log(`üìä –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ —Ç–µ—Å—Ç—É:`);
            console.log(`   ‚Ä¢ –°–µ—Ä–µ–¥–Ω—ñ–π FPS: ${avgFps}`);
            console.log(`   ‚Ä¢ –°–µ—Ä–µ–¥–Ω—ñ–π —á–∞—Å –Ω–∞ –∫–∞–¥—Ä: ${avgFrameTime}–º—Å`);
            console.log(`   ‚Ä¢ –ó–∞–≥–∞–ª—å–Ω–∏–π —á–∞—Å: ${fpsTestTime}–º—Å`);
            
        } else {
            console.log('‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞—Ö–æ–ø–∏—Ç–∏ –∫–∞–¥—Ä');
        }

        // –û—á–∏—â–µ–Ω–Ω—è
        screenCapture.cleanupCapture();
        console.log('‚úÖ –û—á–∏—â–µ–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ');

    } else {
        console.log('‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó');
    }

} catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è:', error.message);
    
    if (error.code === 'MODULE_NOT_FOUND') {
        console.log('\nüí° –ù–∞—Ç–∏–≤–Ω–∏–π –º–æ–¥—É–ª—å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –î–ª—è –∑–±—ñ—Ä–∫–∏ –≤–∏–∫–æ–Ω–∞–π—Ç–µ:');
        console.log('   npm run build:native');
        console.log('\nüìã –í–∏–º–æ–≥–∏ –¥–ª—è –∑–±—ñ—Ä–∫–∏:');
        console.log('   ‚Ä¢ Visual Studio Build Tools');
        console.log('   ‚Ä¢ Python 3.x');
        console.log('   ‚Ä¢ Node.js headers');
    }
}

// –î–æ–¥–∞—Ç–∫–æ–≤–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è async/await
function delay(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
}

async function main() {
    // –¢–µ—Å—Ç –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è —Ç—É—Ç
}

if (require.main === module) {
    main().catch(console.error);
}