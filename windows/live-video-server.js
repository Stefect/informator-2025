const express = require('express');
const WebSocket = require('ws');
const http = require('http');
const path = require('path');

let screenCapture;
try {
    screenCapture = require('./dist/screencapture.node');
    console.log('‚úÖ –ú–æ–¥—É–ª—å –∑–∞—Ö–æ–ø–ª–µ–Ω–Ω—è –µ–∫—Ä–∞–Ω—É —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ!');
} catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –º–æ–¥—É–ª—è –∑–∞—Ö–æ–ø–ª–µ–Ω–Ω—è –µ–∫—Ä–∞–Ω—É:', error.message);
    process.exit(1);
}

const PORT = 3001;
const app = express();
const server = http.createServer(app);
const wss = new WebSocket.Server({ server });

console.log('üöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ live –≤—ñ–¥–µ–æ-—Å—Ç—Ä—ñ–º—ñ–Ω–≥—É...');

// –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∑–∞—Ö–æ–ø–ª–µ–Ω–Ω—è –¥–ª—è –≤—ñ–¥–µ–æ
screenCapture.setTargetFPS(30); // 30 FPS –¥–ª—è –¥—É–∂–µ –ø–ª–∞–≤–Ω–æ–≥–æ –≤—ñ–¥–µ–æ
screenCapture.setActiveClients(true);

// –°—Ç–∞—Ç–∏—á–Ω—ñ —Ñ–∞–π–ª–∏ –≤–∏–º–∫–Ω–µ–Ω—ñ –¥–ª—è live –≤—ñ–¥–µ–æ-—Å—Ç—Ä—ñ–º—É

// –ì–æ–ª–æ–≤–Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞ –∑ –≤—ñ–¥–µ–æ-—Å—Ç—Ä—ñ–º–æ–º
app.get('/', (req, res) => {
    res.send(`
    <!DOCTYPE html>
    <html lang="uk">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Live Desktop Video Stream - Informator</title>
        <style>
            body {
                font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
                margin: 0;
                padding: 20px;
                background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                color: white;
                min-height: 100vh;
            }
            .container {
                max-width: 1200px;
                margin: 0 auto;
                text-align: center;
            }
            h1 {
                margin-bottom: 30px;
                font-size: 2.5rem;
                text-shadow: 2px 2px 4px rgba(0,0,0,0.3);
            }
            .status {
                background: rgba(255,255,255,0.1);
                padding: 15px;
                border-radius: 10px;
                margin: 20px 0;
                backdrop-filter: blur(10px);
            }
            .video-container {
                background: rgba(0,0,0,0.3);
                padding: 20px;
                border-radius: 15px;
                margin: 20px 0;
                backdrop-filter: blur(10px);
                box-shadow: 0 8px 32px rgba(0,0,0,0.3);
            }
            canvas {
                width: 100%;
                max-width: 1000px;
                height: auto;
                border-radius: 10px;
                box-shadow: 0 4px 20px rgba(0,0,0,0.3);
                background: #000;
            }
            .controls {
                margin: 20px 0;
            }
            button {
                background: #4CAF50;
                color: white;
                border: none;
                padding: 12px 24px;
                margin: 0 10px;
                border-radius: 25px;
                font-size: 16px;
                cursor: pointer;
                transition: all 0.3s ease;
                box-shadow: 0 4px 15px rgba(0,0,0,0.2);
            }
            button:hover {
                background: #45a049;
                transform: translateY(-2px);
                box-shadow: 0 6px 20px rgba(0,0,0,0.3);
            }
            button:disabled {
                background: #cccccc;
                cursor: not-allowed;
                transform: none;
            }
            select {
                background: #4CAF50;
                color: white;
                border: none;
                padding: 8px 16px;
                margin: 0 10px;
                border-radius: 20px;
                font-size: 14px;
                cursor: pointer;
            }
            label {
                color: white;
                font-size: 16px;
                margin-right: 10px;
            }
            .success { color: #4CAF50; font-weight: bold; }
            .error { color: #f44336; font-weight: bold; }
            .info {
                background: rgba(255,255,255,0.1);
                padding: 10px;
                border-radius: 10px;
                margin: 10px 0;
                backdrop-filter: blur(10px);
                font-size: 14px;
            }
        </style>
    </head>
    <body>
        <div class="container">
            <h1>üé• Live Desktop Stream - Informator</h1>
            <div class="status" id="status">üîÑ –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è...</div>
            <div class="info" id="info">‚ÑπÔ∏è –û—á—ñ–∫—É–≤–∞–Ω–Ω—è –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ —Å–µ—Ä–≤–µ—Ä–∞...</div>
            
            <div class="video-container">
                <canvas id="videoCanvas" width="1280" height="720"></canvas>
            </div>
            
            <div class="controls">
                <button id="startStream" onclick="startStream()" disabled>‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç–∏ —Å—Ç—Ä—ñ–º</button>
                <button id="stopStream" onclick="stopStream()" disabled>‚èπÔ∏è –ó—É–ø–∏–Ω–∏—Ç–∏ —Å—Ç—Ä—ñ–º</button>
                <br><br>
                <label for="fpsSelect">üéØ –®–≤–∏–¥–∫—ñ—Å—Ç—å –∫–∞–¥—Ä—ñ–≤:</label>
                <select id="fpsSelect" onchange="changeFPS()">
                    <option value="15">15 FPS (—Å—Ç–∞–Ω–¥–∞—Ä—Ç)</option>
                    <option value="30" selected>30 FPS (–ø–ª–∞–≤–Ω–æ)</option>
                    <option value="60">60 FPS (–¥—É–∂–µ –ø–ª–∞–≤–Ω–æ)</option>
                </select>
            </div>
        </div>

        <script>
            const statusEl = document.getElementById('status');
            const infoEl = document.getElementById('info');
            const canvas = document.getElementById('videoCanvas');
            const ctx = canvas.getContext('2d');
            const startBtn = document.getElementById('startStream');
            const stopBtn = document.getElementById('stopStream');

            let ws = null;
            let isStreaming = false;
            let frameCount = 0;
            let startTime = Date.now();

            function connectWebSocket() {
                ws = new WebSocket('ws://localhost:3001');
                
                ws.onopen = function() {
                    statusEl.innerHTML = '<span class="success">‚úÖ –ó\\'—î–¥–Ω–∞–Ω–Ω—è –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ</span>';
                    infoEl.innerHTML = 'üì° –ì–æ—Ç–æ–≤–∏–π –¥–æ –∑–∞–ø—É—Å–∫—É live –≤—ñ–¥–µ–æ-—Å—Ç—Ä—ñ–º—É';
                    startBtn.disabled = false;
                };

                ws.onmessage = function(event) {
                    // –û–±—Ä–æ–±–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å (–ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è FPS)
                    if (typeof event.data === 'string' && event.data.startsWith('fps_changed:')) {
                        const newFPS = event.data.split(':')[1];
                        console.log('FPS –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ:', newFPS);
                        infoEl.innerHTML = '‚úÖ –®–≤–∏–¥–∫—ñ—Å—Ç—å –∫–∞–¥—Ä—ñ–≤ –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞ ' + newFPS + ' FPS';
                        return;
                    }
                    
                    if (event.data instanceof Blob && isStreaming) {
                        // –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ Blob —É –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Ç–∞ –º–∞–ª—é—î–º–æ –Ω–∞ canvas
                        const url = URL.createObjectURL(event.data);
                        const img = new Image();
                        
                        img.onload = function() {
                            // –ú–∞—Å—à—Ç–∞–±—É—î–º–æ —Ç–∞ –º–∞–ª—é—î–º–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –Ω–∞ canvas
                            ctx.drawImage(img, 0, 0, canvas.width, canvas.height);
                            
                            // –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                            frameCount++;
                            const fps = (frameCount / ((Date.now() - startTime) / 1000)).toFixed(1);
                            const sizeKB = (event.data.size / 1024).toFixed(1);
                            
                            infoEl.innerHTML = \`
                                üé¨ Live –≤—ñ–¥–µ–æ-—Å—Ç—Ä—ñ–º –∞–∫—Ç–∏–≤–Ω–∏–π | 
                                üìä –ö–∞–¥—Ä #\${frameCount} | 
                                üéØ FPS: \${fps} | 
                                üìè –†–æ–∑–º—ñ—Ä –∫–∞–¥—Ä—É: \${sizeKB} KB
                            \`;
                            
                            URL.revokeObjectURL(url);
                        };
                        
                        img.src = url;
                    }
                };

                ws.onclose = function() {
                    statusEl.innerHTML = '<span class="error">‚ùå –ó\\'—î–¥–Ω–∞–Ω–Ω—è —Ä–æ–∑—ñ—Ä–≤–∞–Ω–æ</span>';
                    infoEl.innerHTML = 'üîÑ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—è —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥–∏...';
                    startBtn.disabled = true;
                    stopBtn.disabled = true;
                    isStreaming = false;
                    setTimeout(connectWebSocket, 3000);
                };

                ws.onerror = function(error) {
                    statusEl.innerHTML = '<span class="error">‚ùå –ü–æ–º–∏–ª–∫–∞ –∑\\'—î–¥–Ω–∞–Ω–Ω—è</span>';
                    console.error('WebSocket –ø–æ–º–∏–ª–∫–∞:', error);
                };
            }

            function startStream() {
                if (!ws || ws.readyState !== WebSocket.OPEN) {
                    infoEl.innerHTML = '<span class="error">‚ùå –ù–µ–º–∞—î –∑\\'—î–¥–Ω–∞–Ω–Ω—è –∑ —Å–µ—Ä–≤–µ—Ä–æ–º</span>';
                    return;
                }

                ws.send('start_video_stream');
                isStreaming = true;
                frameCount = 0;
                startTime = Date.now();
                
                startBtn.disabled = true;
                stopBtn.disabled = false;
                statusEl.innerHTML = '<span class="success">üî¥ Live —Å—Ç—Ä—ñ–º –∞–∫—Ç–∏–≤–Ω–∏–π</span>';
                infoEl.innerHTML = 'üé¨ –ó–∞–ø–æ—á–∞—Ç–∫—É–≤–∞–Ω–Ω—è –≤—ñ–¥–µ–æ-—Å—Ç—Ä—ñ–º—É –∑ —Ä–æ–±–æ—á–æ–≥–æ —Å—Ç–æ–ª—É...';
            }

            function stopStream() {
                if (ws && ws.readyState === WebSocket.OPEN) {
                    ws.send('stop_video_stream');
                }
                
                isStreaming = false;
                startBtn.disabled = false;
                stopBtn.disabled = true;
                statusEl.innerHTML = '<span class="success">‚è∏Ô∏è –°—Ç—Ä—ñ–º –∑—É–ø–∏–Ω–µ–Ω–æ</span>';
                infoEl.innerHTML = 'üì° –ì–æ—Ç–æ–≤–∏–π –¥–æ –∑–∞–ø—É—Å–∫—É –Ω–æ–≤–æ–≥–æ —Å—Ç—Ä—ñ–º—É';
                
                // –û—á–∏—â—É—î–º–æ canvas
                ctx.fillStyle = '#000';
                ctx.fillRect(0, 0, canvas.width, canvas.height);
                ctx.fillStyle = '#fff';
                ctx.font = '24px Arial';
                ctx.textAlign = 'center';
                ctx.fillText('–°—Ç—Ä—ñ–º –∑—É–ø–∏–Ω–µ–Ω–æ', canvas.width/2, canvas.height/2);
            }

            function changeFPS() {
                const fpsSelect = document.getElementById('fpsSelect');
                const selectedFPS = fpsSelect.value;
                
                if (ws && ws.readyState === WebSocket.OPEN) {
                    ws.send('set_fps:' + selectedFPS);
                    infoEl.innerHTML = 'üéØ –®–≤–∏–¥–∫—ñ—Å—Ç—å –∫–∞–¥—Ä—ñ–≤ –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞ ' + selectedFPS + ' FPS';
                }
            }

            // –ê–≤—Ç–æ–ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ
            connectWebSocket();
        </script>
    </body>
    </html>
    `);
});

// WebSocket –æ–±—Ä–æ–±–∫–∞ –¥–ª—è –≤—ñ–¥–µ–æ-—Å—Ç—Ä—ñ–º—É
wss.on('connection', (ws) => {
    console.log('üîó –ù–æ–≤–∏–π –∫–ª—ñ—î–Ω—Ç –ø—ñ–¥–∫–ª—é—á–∏–≤—Å—è –¥–ª—è live –≤—ñ–¥–µ–æ-—Å—Ç—Ä—ñ–º—É');
    
    let streamInterval = null;
    let isActiveStream = false;
    let currentFPS = 30;
    
    // –¢–µ—Å—Ç–æ–≤–µ –∑–∞—Ö–æ–ø–ª–µ–Ω–Ω—è
    try {
        const testCapture = screenCapture.capture();
        if (testCapture) {
            console.log('‚úÖ –¢–µ—Å—Ç–æ–≤–µ –∑–∞—Ö–æ–ø–ª–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–µ, —Ä–æ–∑–º—ñ—Ä:', testCapture.length, '–±–∞–π—Ç');
        }
        
        const screenSize = screenCapture.getScreenSize();
        console.log('üìè –†–æ–∑–º—ñ—Ä –µ–∫—Ä–∞–Ω—É:', screenSize.width + 'x' + screenSize.height);
    } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–æ–≤–æ–º—É –∑–∞—Ö–æ–ø–ª–µ–Ω–Ω—ñ:', error);
    }

    ws.on('message', (message) => {
        const command = message.toString();
        console.log('üì© –û—Ç—Ä–∏–º–∞–Ω–æ –∫–æ–º–∞–Ω–¥—É:', command);
        
        if (command === 'start_video_stream') {
            startVideoStream();
        } else if (command === 'stop_video_stream') {
            stopVideoStream();
        } else if (command.startsWith('set_fps:')) {
            const fps = parseInt(command.split(':')[1]);
            changeFPSRate(fps);
        }
    });

    ws.on('close', () => {
        console.log('üîå –ö–ª—ñ—î–Ω—Ç –≤—ñ–¥–∫–ª—é—á–∏–≤—Å—è –≤—ñ–¥ –≤—ñ–¥–µ–æ-—Å—Ç—Ä—ñ–º—É');
        stopVideoStream();
    });

    ws.on('error', (error) => {
        console.error('‚ùå WebSocket –ø–æ–º–∏–ª–∫–∞:', error.message);
        stopVideoStream();
    });

    function startVideoStream() {
        if (isActiveStream) return;
        
        console.log('üé¨ –ó–∞–ø—É—Å–∫ live –≤—ñ–¥–µ–æ-—Å—Ç—Ä—ñ–º—É...');
        isActiveStream = true;
        
        // –ó–∞—Ö–æ–ø–ª—é—î–º–æ –∫–∞–¥—Ä–∏ –∑ —á–∞—Å—Ç–æ—Ç–æ—é 30 FPS –¥–ª—è –¥—É–∂–µ –ø–ª–∞–≤–Ω–æ–≥–æ –≤—ñ–¥–µ–æ
        streamInterval = setInterval(() => {
            try {
                if (ws.readyState === WebSocket.OPEN) {
                    const frameData = screenCapture.capture();
                    if (frameData && frameData.length > 0) {
                        ws.send(frameData);
                    }
                } else {
                    console.log('‚ö†Ô∏è WebSocket –∑–∞–∫—Ä–∏—Ç–æ, –∑—É–ø–∏–Ω–∫–∞ —Å—Ç—Ä—ñ–º—É');
                    stopVideoStream();
                }
            } catch (error) {
                console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞—Ö–æ–ø–ª–µ–Ω–Ω—è –∫–∞–¥—Ä—É:', error);
                stopVideoStream();
            }
        }, Math.round(1000 / currentFPS)); // –î–∏–Ω–∞–º—ñ—á–Ω–∏–π FPS
    }

    function stopVideoStream() {
        if (!isActiveStream) return;
        
        console.log('üõë –ó—É–ø–∏–Ω–∫–∞ live –≤—ñ–¥–µ–æ-—Å—Ç—Ä—ñ–º—É...');
        isActiveStream = false;
        
        if (streamInterval) {
            clearInterval(streamInterval);
            streamInterval = null;
        }
    }

    function changeFPSRate(fps) {
        currentFPS = fps;
        console.log('üéØ –ó–º—ñ–Ω–∞ FPS –Ω–∞:', fps);
        screenCapture.setTargetFPS(fps);
        
        // –ù–∞–¥—Å–∏–ª–∞—î–º–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç—É
        if (ws.readyState === WebSocket.OPEN) {
            ws.send(`fps_changed:${fps}`);
        }
        
        // –Ø–∫—â–æ —Å—Ç—Ä—ñ–º –∞–∫—Ç–∏–≤–Ω–∏–π, –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—î–º–æ –∑ –Ω–æ–≤–∏–º FPS
        if (isActiveStream) {
            stopVideoStream();
            setTimeout(() => startVideoStream(), 100);
        }
    }
});

// –û–±—Ä–æ–±–∫–∞ —Å–∏–≥–Ω–∞–ª—ñ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è
process.on('SIGINT', () => {
    console.log('\\nüõë –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ä–æ–±–æ—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞...');
    screenCapture.setActiveClients(false);
    server.close(() => {
        console.log('‚úÖ –°–µ—Ä–≤–µ—Ä –∑—É–ø–∏–Ω–µ–Ω–æ');
        process.exit(0);
    });
});

server.listen(PORT, () => {
    console.log(`üåê Live –≤—ñ–¥–µ–æ-—Å—Ç—Ä—ñ–º —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
    console.log(`üîó –í—ñ–¥–∫—Ä–∏–π—Ç–µ http://localhost:${PORT} —É –±—Ä–∞—É–∑–µ—Ä—ñ`);
    console.log('üé• –ì–æ—Ç–æ–≤–∏–π –¥–æ live –≤—ñ–¥–µ–æ-—Ç—Ä–∞–Ω—Å–ª—è—Ü—ñ—ó —Ä–æ–±–æ—á–æ–≥–æ —Å—Ç–æ–ª—É!');
});