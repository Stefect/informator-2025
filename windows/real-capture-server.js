const express = require('express');
const WebSocket = require('ws');
const http = require('http');
const path = require('path');

let screenCapture;
try {
    screenCapture = require('./dist/screencapture.node');
    console.log('‚úÖ –ú–æ–¥—É–ª—å –∑–∞—Ö–æ–ø–ª–µ–Ω–Ω—è –µ–∫—Ä–∞–Ω—É —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ!');
} catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –º–æ–¥—É–ª—è –∑–∞—Ö–æ–ø–ª–µ–Ω–Ω—è –µ–∫—Ä–∞–Ω—É:', error.message);
    process.exit(1);
}

const PORT = 3001;
const app = express();
const server = http.createServer(app);
const wss = new WebSocket.Server({ server });

console.log('üöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –∑ —Ä–µ–∞–ª—å–Ω–∏–º –∑–∞—Ö–æ–ø–ª–µ–Ω–Ω—è–º –µ–∫—Ä–∞–Ω—É...');

// –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –º–æ–¥—É–ª—è –∑–∞—Ö–æ–ø–ª–µ–Ω–Ω—è
screenCapture.setTargetFPS(5);
screenCapture.setActiveClients(true);

// –°—Ç–∞—Ç–∏—á–Ω—ñ —Ñ–∞–π–ª–∏
app.use(express.static(path.join(__dirname, 'public')));

// –ì–æ–ª–æ–≤–Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞
app.get('/', (req, res) => {
    res.send(`
    <!DOCTYPE html>
    <html lang="uk">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Informator - –†–µ–∞–ª—å–Ω–µ –∑–∞—Ö–æ–ø–ª–µ–Ω–Ω—è –µ–∫—Ä–∞–Ω—É</title>
        <style>
            body {
                font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
                margin: 0;
                padding: 20px;
                background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                color: white;
                min-height: 100vh;
            }
            .container {
                max-width: 1200px;
                margin: 0 auto;
                text-align: center;
            }
            h1 {
                margin-bottom: 30px;
                font-size: 2.5rem;
                text-shadow: 2px 2px 4px rgba(0,0,0,0.3);
            }
            .status {
                background: rgba(255,255,255,0.1);
                padding: 15px;
                border-radius: 10px;
                margin: 20px 0;
                backdrop-filter: blur(10px);
            }
            .video-container {
                background: rgba(0,0,0,0.2);
                padding: 20px;
                border-radius: 10px;
                margin: 20px 0;
                backdrop-filter: blur(10px);
            }
            img {
                max-width: 100%;
                height: auto;
                border-radius: 5px;
                box-shadow: 0 4px 20px rgba(0,0,0,0.3);
            }
            .info {
                background: rgba(255,255,255,0.1);
                padding: 15px;
                border-radius: 10px;
                margin: 10px 0;
                backdrop-filter: blur(10px);
            }
            .success { color: #4CAF50; font-weight: bold; }
            .error { color: #f44336; font-weight: bold; }
        </style>
    </head>
    <body>
        <div class="container">
            <h1>üñ•Ô∏è Informator - –†–µ–∞–ª—å–Ω–µ –∑–∞—Ö–æ–ø–ª–µ–Ω–Ω—è –µ–∫—Ä–∞–Ω—É</h1>
            <div class="status" id="status">üîÑ –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ —Å–µ—Ä–≤–µ—Ä–∞...</div>
            <div class="info" id="info"></div>
            <div class="video-container">
                <img id="screenImage" alt="–ó–∞—Ö–æ–ø–ª–µ–Ω–Ω—è –µ–∫—Ä–∞–Ω—É" style="display: none;" />
                <div id="placeholder">üñºÔ∏è –û—á—ñ–∫—É–≤–∞–Ω–Ω—è –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –µ–∫—Ä–∞–Ω—É...</div>
            </div>
        </div>

        <script>
            const statusEl = document.getElementById('status');
            const infoEl = document.getElementById('info');
            const imageEl = document.getElementById('screenImage');
            const placeholderEl = document.getElementById('placeholder');

            let frameCount = 0;
            let startTime = Date.now();

            const ws = new WebSocket('ws://localhost:3001');

            ws.onopen = function() {
                statusEl.innerHTML = '<span class="success">‚úÖ –ó\\'—î–¥–Ω–∞–Ω–Ω—è –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ</span>';
                console.log('–ü—ñ–¥–∫–ª—é—á–µ–Ω–æ –¥–æ WebSocket —Å–µ—Ä–≤–µ—Ä–∞');
            };

            ws.onmessage = function(event) {
                if (event.data instanceof Blob) {
                    frameCount++;
                    const fps = (frameCount / ((Date.now() - startTime) / 1000)).toFixed(1);
                    
                    const url = URL.createObjectURL(event.data);
                    imageEl.src = url;
                    imageEl.style.display = 'block';
                    placeholderEl.style.display = 'none';
                    
                    // –ó–≤—ñ–ª—å–Ω—è—î–º–æ –ø–∞–º'—è—Ç—å –≤—ñ–¥ –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ URL
                    setTimeout(() => URL.revokeObjectURL(url), 1000);
                    
                    infoEl.innerHTML = \`
                        üìä –ö–∞–¥—Ä #\${frameCount} | 
                        üéØ FPS: \${fps} | 
                        üìè –†–æ–∑–º—ñ—Ä: \${(event.data.size / 1024).toFixed(1)} KB
                    \`;
                }
            };

            ws.onclose = function() {
                statusEl.innerHTML = '<span class="error">‚ùå –ó\\'—î–¥–Ω–∞–Ω–Ω—è —Ä–æ–∑—ñ—Ä–≤–∞–Ω–æ</span>';
                console.log('WebSocket –∑\\'—î–¥–Ω–∞–Ω–Ω—è –∑–∞–∫—Ä–∏—Ç–æ');
            };

            ws.onerror = function(error) {
                statusEl.innerHTML = '<span class="error">‚ùå –ü–æ–º–∏–ª–∫–∞ –∑\\'—î–¥–Ω–∞–Ω–Ω—è</span>';
                console.error('WebSocket –ø–æ–º–∏–ª–∫–∞:', error);
            };
        </script>
    </body>
    </html>
    `);
});

// WebSocket –∑'—î–¥–Ω–∞–Ω–Ω—è
wss.on('connection', (ws) => {
    console.log('üîó –ù–æ–≤–∏–π –∫–ª—ñ—î–Ω—Ç –ø—ñ–¥–∫–ª—é—á–∏–≤—Å—è');
    
    // –¢–µ—Å—Ç–æ–≤–µ –∑–∞—Ö–æ–ø–ª–µ–Ω–Ω—è –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
    try {
        const testCapture = screenCapture.capture();
        if (testCapture) {
            console.log('‚úÖ –¢–µ—Å—Ç–æ–≤–µ –∑–∞—Ö–æ–ø–ª–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–µ, —Ä–æ–∑–º—ñ—Ä:', testCapture.length, '–±–∞–π—Ç');
        } else {
            console.log('‚ö†Ô∏è  –¢–µ—Å—Ç–æ–≤–µ –∑–∞—Ö–æ–ø–ª–µ–Ω–Ω—è –ø–æ–≤–µ—Ä–Ω—É–ª–æ null');
        }
        
        const screenSize = screenCapture.getScreenSize();
        console.log('üìè –†–æ–∑–º—ñ—Ä –µ–∫—Ä–∞–Ω—É:', screenSize.width + 'x' + screenSize.height);
    } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–æ–≤–æ–º—É –∑–∞—Ö–æ–ø–ª–µ–Ω–Ω—ñ:', error);
    }

    // –†–µ–≥—É–ª—è—Ä–Ω–µ –∑–∞—Ö–æ–ø–ª–µ–Ω–Ω—è –µ–∫—Ä–∞–Ω—É
    let frameCounter = 0;
    const captureInterval = setInterval(() => {
        try {
            const frameData = screenCapture.capture();
            if (frameData && frameData.length > 0) {
                frameCounter++;
                if (frameCounter % 5 === 0) { // –õ–æ–≥—É—î–º–æ –∫–æ–∂–µ–Ω 5-–π –∫–∞–¥—Ä
                    console.log(`üì∏ –ù–∞–¥—ñ—Å–ª–∞–Ω–æ –∫–∞–¥—Ä #${frameCounter}, —Ä–æ–∑–º—ñ—Ä: ${(frameData.length / 1024).toFixed(1)} KB`);
                }
                // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å—Ç–∞–Ω WebSocket –ø–µ—Ä–µ–¥ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è–º
                if (ws.readyState === ws.OPEN) {
                    ws.send(frameData);
                } else {
                    console.log('‚ö†Ô∏è WebSocket –Ω–µ –≥–æ—Ç–æ–≤–∏–π, —Å—Ç–∞–Ω:', ws.readyState);
                }
            } else {
                console.log('‚ö†Ô∏è –ó–∞—Ö–æ–ø–ª–µ–Ω–Ω—è –ø–æ–≤–µ—Ä–Ω—É–ª–æ –ø—É—Å—Ç—ñ –¥–∞–Ω—ñ');
            }
        } catch (error) {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞—Ö–æ–ø–ª–µ–Ω–Ω—ñ –∫–∞–¥—Ä—É:', error);
            clearInterval(captureInterval);
        }
    }, 1000); // 1 FPS - –º–µ–Ω—à–µ –Ω–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è

    ws.on('close', (code, reason) => {
        console.log(`üîå –ö–ª—ñ—î–Ω—Ç –≤—ñ–¥–∫–ª—é—á–∏–≤—Å—è. –ö–æ–¥: ${code}, –ü—Ä–∏—á–∏–Ω–∞: ${reason}`);
        clearInterval(captureInterval);
    });

    ws.on('error', (error) => {
        console.error('‚ùå WebSocket –ø–æ–º–∏–ª–∫–∞:', error.message);
        clearInterval(captureInterval);
    });

    ws.on('message', (message) => {
        console.log('üì© –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ –∫–ª—ñ—î–Ω—Ç–∞:', message.toString());
    });
});

// –û–±—Ä–æ–±–∫–∞ —Å–∏–≥–Ω–∞–ª—ñ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è
process.on('SIGINT', () => {
    console.log('\\nüõë –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ä–æ–±–æ—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞...');
    screenCapture.setActiveClients(false);
    server.close(() => {
        console.log('‚úÖ –°–µ—Ä–≤–µ—Ä –∑—É–ø–∏–Ω–µ–Ω–æ');
        process.exit(0);
    });
});

server.listen(PORT, () => {
    console.log(`üåê –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
    console.log(`üîó –í—ñ–¥–∫—Ä–∏–π—Ç–µ http://localhost:${PORT} —É –±—Ä–∞—É–∑–µ—Ä—ñ`);
    console.log('üìπ –†–µ–∞–ª—å–Ω–µ –∑–∞—Ö–æ–ø–ª–µ–Ω–Ω—è –µ–∫—Ä–∞–Ω—É –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ!');
});