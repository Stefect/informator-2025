const express = require('express');
const WebSocket = require('ws');
const http = require('http');
const path = require('path');
const { spawn } = require('child_process');

const PORT = 3001;
const app = express();
const server = http.createServer(app);
const wss = new WebSocket.Server({ server });

console.log('üöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –≤—ñ–¥–µ–æ-—Å—Ç—Ä—ñ–º—ñ–Ω–≥—É –∑ —Ä–æ–±–æ—á–æ–≥–æ —Å—Ç–æ–ª—É...');

// –°—Ç–∞—Ç–∏—á–Ω—ñ —Ñ–∞–π–ª–∏
app.use(express.static(path.join(__dirname, 'public')));

// –ì–æ–ª–æ–≤–Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞ –∑ –≤—ñ–¥–µ–æ-–ø–ª–µ—î—Ä–æ–º
app.get('/', (req, res) => {
    res.send(`
    <!DOCTYPE html>
    <html lang="uk">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Live Desktop Stream - Informator</title>
        <style>
            body {
                font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
                margin: 0;
                padding: 20px;
                background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                color: white;
                min-height: 100vh;
            }
            .container {
                max-width: 1200px;
                margin: 0 auto;
                text-align: center;
            }
            h1 {
                margin-bottom: 30px;
                font-size: 2.5rem;
                text-shadow: 2px 2px 4px rgba(0,0,0,0.3);
            }
            .status {
                background: rgba(255,255,255,0.1);
                padding: 15px;
                border-radius: 10px;
                margin: 20px 0;
                backdrop-filter: blur(10px);
            }
            .video-container {
                background: rgba(0,0,0,0.3);
                padding: 20px;
                border-radius: 15px;
                margin: 20px 0;
                backdrop-filter: blur(10px);
                box-shadow: 0 8px 32px rgba(0,0,0,0.3);
            }
            #videoPlayer {
                width: 100%;
                max-width: 1000px;
                height: auto;
                border-radius: 10px;
                box-shadow: 0 4px 20px rgba(0,0,0,0.3);
            }
            .controls {
                margin: 20px 0;
            }
            button {
                background: #4CAF50;
                color: white;
                border: none;
                padding: 12px 24px;
                margin: 0 10px;
                border-radius: 25px;
                font-size: 16px;
                cursor: pointer;
                transition: all 0.3s ease;
                box-shadow: 0 4px 15px rgba(0,0,0,0.2);
            }
            button:hover {
                background: #45a049;
                transform: translateY(-2px);
                box-shadow: 0 6px 20px rgba(0,0,0,0.3);
            }
            button:disabled {
                background: #cccccc;
                cursor: not-allowed;
                transform: none;
            }
            .success { color: #4CAF50; font-weight: bold; }
            .error { color: #f44336; font-weight: bold; }
            .info {
                background: rgba(255,255,255,0.1);
                padding: 10px;
                border-radius: 10px;
                margin: 10px 0;
                backdrop-filter: blur(10px);
            }
        </style>
    </head>
    <body>
        <div class="container">
            <h1>üñ•Ô∏è Live Desktop Stream - Informator</h1>
            <div class="status" id="status">üîÑ –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–æ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è...</div>
            <div class="info" id="info">‚ÑπÔ∏è –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å "–ó–∞–ø—É—Å—Ç–∏—Ç–∏ —Å—Ç—Ä—ñ–º" –¥–ª—è –ø–æ—á–∞—Ç–∫—É —Ç—Ä–∞–Ω—Å–ª—è—Ü—ñ—ó</div>
            
            <div class="video-container">
                <video id="videoPlayer" controls autoplay muted>
                    <source id="videoSource" type="video/webm">
                    –í–∞—à –±—Ä–∞—É–∑–µ—Ä –Ω–µ –ø—ñ–¥—Ç—Ä–∏–º—É—î –≤—ñ–¥–µ–æ-–µ–ª–µ–º–µ–Ω—Ç.
                </video>
            </div>
            
            <div class="controls">
                <button id="startStream" onclick="startStreaming()">‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç–∏ —Å—Ç—Ä—ñ–º</button>
                <button id="stopStream" onclick="stopStreaming()" disabled>‚èπÔ∏è –ó—É–ø–∏–Ω–∏—Ç–∏ —Å—Ç—Ä—ñ–º</button>
            </div>
        </div>

        <script>
            const statusEl = document.getElementById('status');
            const infoEl = document.getElementById('info');
            const videoPlayer = document.getElementById('videoPlayer');
            const videoSource = document.getElementById('videoSource');
            const startBtn = document.getElementById('startStream');
            const stopBtn = document.getElementById('stopStream');

            let ws = null;
            let mediaSource = null;
            let sourceBuffer = null;
            let isStreaming = false;

            function connectWebSocket() {
                ws = new WebSocket('ws://localhost:3001/stream');
                
                ws.onopen = function() {
                    statusEl.innerHTML = '<span class="success">‚úÖ –ó\\'—î–¥–Ω–∞–Ω–Ω—è –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ</span>';
                    infoEl.innerHTML = 'üì° –ì–æ—Ç–æ–≤–∏–π –¥–æ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—ñ–¥–µ–æ-—Å—Ç—Ä—ñ–º—É';
                    startBtn.disabled = false;
                };

                ws.onmessage = function(event) {
                    if (event.data instanceof Blob) {
                        // –û—Ç—Ä–∏–º—É—î–º–æ –≤—ñ–¥–µ–æ-–¥–∞–Ω—ñ —Ç–∞ –¥–æ–¥–∞—î–º–æ —ó—Ö –¥–æ MediaSource
                        if (sourceBuffer && !sourceBuffer.updating) {
                            event.data.arrayBuffer().then(buffer => {
                                sourceBuffer.appendBuffer(buffer);
                            });
                        }
                    }
                };

                ws.onclose = function() {
                    statusEl.innerHTML = '<span class="error">‚ùå –ó\\'—î–¥–Ω–∞–Ω–Ω—è —Ä–æ–∑—ñ—Ä–≤–∞–Ω–æ</span>';
                    infoEl.innerHTML = 'üîÑ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—è...';
                    startBtn.disabled = true;
                    stopBtn.disabled = true;
                    if (!isStreaming) {
                        setTimeout(connectWebSocket, 3000);
                    }
                };

                ws.onerror = function(error) {
                    statusEl.innerHTML = '<span class="error">‚ùå –ü–æ–º–∏–ª–∫–∞ –∑\\'—î–¥–Ω–∞–Ω–Ω—è</span>';
                    console.error('WebSocket –ø–æ–º–∏–ª–∫–∞:', error);
                };
            }

            function startStreaming() {
                if (!ws || ws.readyState !== WebSocket.OPEN) {
                    infoEl.innerHTML = '<span class="error">‚ùå –ù–µ–º–∞—î –∑\\'—î–¥–Ω–∞–Ω–Ω—è –∑ —Å–µ—Ä–≤–µ—Ä–æ–º</span>';
                    return;
                }

                // –°—Ç–≤–æ—Ä—é—î–º–æ MediaSource –¥–ª—è –≤—ñ–¥–µ–æ-—Å—Ç—Ä—ñ–º—É
                mediaSource = new MediaSource();
                videoSource.src = URL.createObjectURL(mediaSource);

                mediaSource.addEventListener('sourceopen', function() {
                    sourceBuffer = mediaSource.addSourceBuffer('video/webm; codecs="vp8"');
                    
                    sourceBuffer.addEventListener('updateend', function() {
                        if (!isStreaming && mediaSource.readyState === 'open') {
                            mediaSource.endOfStream();
                        }
                    });
                });

                // –ó–∞–ø—É—Å–∫–∞—î–º–æ —Å—Ç—Ä—ñ–º
                ws.send(JSON.stringify({ command: 'start_stream' }));
                isStreaming = true;
                startBtn.disabled = true;
                stopBtn.disabled = false;
                statusEl.innerHTML = '<span class="success">üî¥ –°—Ç—Ä—ñ–º –∞–∫—Ç–∏–≤–Ω–∏–π</span>';
                infoEl.innerHTML = 'üìπ –û—Ç—Ä–∏–º–∞–Ω–Ω—è live –≤—ñ–¥–µ–æ –∑ —Ä–æ–±–æ—á–æ–≥–æ —Å—Ç–æ–ª—É...';
            }

            function stopStreaming() {
                if (ws && ws.readyState === WebSocket.OPEN) {
                    ws.send(JSON.stringify({ command: 'stop_stream' }));
                }
                
                isStreaming = false;
                startBtn.disabled = false;
                stopBtn.disabled = true;
                statusEl.innerHTML = '<span class="success">‚è∏Ô∏è –°—Ç—Ä—ñ–º –∑—É–ø–∏–Ω–µ–Ω–æ</span>';
                infoEl.innerHTML = 'üì° –ì–æ—Ç–æ–≤–∏–π –¥–æ –∑–∞–ø—É—Å–∫—É –Ω–æ–≤–æ–≥–æ —Å—Ç—Ä—ñ–º—É';

                if (mediaSource && mediaSource.readyState === 'open') {
                    mediaSource.endOfStream();
                }
            }

            // –ê–≤—Ç–æ–ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ —Å—Ç–æ—Ä—ñ–Ω–∫–∏
            connectWebSocket();
        </script>
    </body>
    </html>
    `);
});

// WebSocket –æ–±—Ä–æ–±–∫–∞ –¥–ª—è –≤—ñ–¥–µ–æ-—Å—Ç—Ä—ñ–º—É
wss.on('connection', (ws, req) => {
    console.log('üîó –ù–æ–≤–∏–π –∫–ª—ñ—î–Ω—Ç –ø—ñ–¥–∫–ª—é—á–∏–≤—Å—è –¥–ª—è –≤—ñ–¥–µ–æ-—Å—Ç—Ä—ñ–º—É');
    
    let ffmpegProcess = null;
    
    ws.on('message', (message) => {
        try {
            const data = JSON.parse(message);
            console.log('üì© –û—Ç—Ä–∏–º–∞–Ω–æ –∫–æ–º–∞–Ω–¥—É:', data.command);
            
            if (data.command === 'start_stream') {
                startDesktopCapture(ws);
            } else if (data.command === 'stop_stream') {
                stopDesktopCapture();
            }
        } catch (error) {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:', error);
        }
    });

    ws.on('close', () => {
        console.log('üîå –ö–ª—ñ—î–Ω—Ç –≤—ñ–¥–∫–ª—é—á–∏–≤—Å—è –≤—ñ–¥ –≤—ñ–¥–µ–æ-—Å—Ç—Ä—ñ–º—É');
        stopDesktopCapture();
    });

    function startDesktopCapture(websocket) {
        console.log('üé¨ –ó–∞–ø—É—Å–∫ –∑–∞—Ö–æ–ø–ª–µ–Ω–Ω—è —Ä–æ–±–æ—á–æ–≥–æ —Å—Ç–æ–ª—É...');
        
        // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ FFmpeg –¥–ª—è –∑–∞—Ö–æ–ø–ª–µ–Ω–Ω—è –µ–∫—Ä–∞–Ω—É —Ç–∞ –∫–æ–¥—É–≤–∞–Ω–Ω—è —É WebM
        ffmpegProcess = spawn('ffmpeg', [
            '-f', 'gdigrab',           // –ó–∞—Ö–æ–ø–ª–µ–Ω–Ω—è –∑ Windows GDI
            '-i', 'desktop',           // –ó–∞—Ö–æ–ø–ª–µ–Ω–Ω—è —Ä–æ–±–æ—á–æ–≥–æ —Å—Ç–æ–ª—É
            '-c:v', 'libvpx',          // –ö–æ–¥–µ–∫ VP8 –¥–ª—è WebM
            '-b:v', '1M',              // –ë—ñ—Ç—Ä–µ–π—Ç –≤—ñ–¥–µ–æ 1 –ú–±—ñ—Ç/—Å
            '-maxrate', '1M',          // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–π –±—ñ—Ç—Ä–µ–π—Ç
            '-bufsize', '2M',          // –ë—É—Ñ–µ—Ä–Ω–∏–π —Ä–æ–∑–º—ñ—Ä
            '-qmin', '10',             // –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ —è–∫—ñ—Å—Ç—å
            '-qmax', '42',             // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ —è–∫—ñ—Å—Ç—å
            '-g', '30',                // Keyframe –∫–æ–∂–Ω—ñ 30 –∫–∞–¥—Ä—ñ–≤
            '-r', '15',                // 15 FPS
            '-s', '1280x720',          // –†–æ–∑–º—ñ—Ä –≤—ñ–¥–µ–æ (–º–æ–∂–Ω–∞ –∑–º—ñ–Ω–∏—Ç–∏)
            '-f', 'webm',              // –§–æ—Ä–º–∞—Ç –≤–∏–≤–æ–¥—É WebM
            '-'                        // –í–∏–≤—ñ–¥ —É stdout
        ], {
            stdio: ['pipe', 'pipe', 'pipe']
        });

        ffmpegProcess.stdout.on('data', (chunk) => {
            // –ù–∞–¥—Å–∏–ª–∞—î–º–æ –≤—ñ–¥–µ–æ-–¥–∞–Ω—ñ –∫–ª—ñ—î–Ω—Ç—É
            if (websocket.readyState === WebSocket.OPEN) {
                websocket.send(chunk);
            }
        });

        ffmpegProcess.stderr.on('data', (data) => {
            console.log('FFmpeg –ª–æ–≥:', data.toString());
        });

        ffmpegProcess.on('close', (code) => {
            console.log('üõë FFmpeg –ø—Ä–æ—Ü–µ—Å –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∑ –∫–æ–¥–æ–º:', code);
        });

        ffmpegProcess.on('error', (error) => {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ FFmpeg:', error);
            if (websocket.readyState === WebSocket.OPEN) {
                websocket.send(JSON.stringify({ 
                    error: '–ü–æ–º–∏–ª–∫–∞ –∑–∞—Ö–æ–ø–ª–µ–Ω–Ω—è –µ–∫—Ä–∞–Ω—É. –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è, —â–æ FFmpeg –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.' 
                }));
            }
        });
    }

    function stopDesktopCapture() {
        if (ffmpegProcess) {
            console.log('üõë –ó—É–ø–∏–Ω–∫–∞ –∑–∞—Ö–æ–ø–ª–µ–Ω–Ω—è –µ–∫—Ä–∞–Ω—É...');
            ffmpegProcess.kill('SIGTERM');
            ffmpegProcess = null;
        }
    }
});

// –û–±—Ä–æ–±–∫–∞ —Å–∏–≥–Ω–∞–ª—ñ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è
process.on('SIGINT', () => {
    console.log('\\nüõë –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ä–æ–±–æ—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞...');
    server.close(() => {
        console.log('‚úÖ –°–µ—Ä–≤–µ—Ä –∑—É–ø–∏–Ω–µ–Ω–æ');
        process.exit(0);
    });
});

server.listen(PORT, () => {
    console.log(`üåê –°–µ—Ä–≤–µ—Ä –≤—ñ–¥–µ–æ-—Å—Ç—Ä—ñ–º—ñ–Ω–≥—É –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
    console.log(`üîó –í—ñ–¥–∫—Ä–∏–π—Ç–µ http://localhost:${PORT} —É –±—Ä–∞—É–∑–µ—Ä—ñ`);
    console.log('üìπ Live –∑–∞—Ö–æ–ø–ª–µ–Ω–Ω—è —Ä–æ–±–æ—á–æ–≥–æ —Å—Ç–æ–ª—É –≥–æ—Ç–æ–≤–µ!');
    console.log('‚ÑπÔ∏è  –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è, —â–æ FFmpeg –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Ç–∞ –¥–æ—Å—Ç—É–ø–Ω–∏–π —É PATH');
});